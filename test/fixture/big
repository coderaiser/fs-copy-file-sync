/******/ (function(modules) { // webpackBootstrap
/******/ 	// install a JSONP callback for chunk loading
/******/ 	var parentJsonpFunction = window["webpackJsonp"];
/******/ 	window["webpackJsonp"] = function webpackJsonpCallback(chunkIds, moreModules, executeModules) {
/******/ 		// add "moreModules" to the modules object,
/******/ 		// then flag all "chunkIds" as loaded and fire callback
/******/ 		var moduleId, chunkId, i = 0, resolves = [], result;
/******/ 		for(;i < chunkIds.length; i++) {
/******/ 			chunkId = chunkIds[i];
/******/ 			if(installedChunks[chunkId]) {
/******/ 				resolves.push(installedChunks[chunkId][0]);
/******/ 			}
/******/ 			installedChunks[chunkId] = 0;
/******/ 		}
/******/ 		for(moduleId in moreModules) {
/******/ 			if(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {
/******/ 				modules[moduleId] = moreModules[moduleId];
/******/ 			}
/******/ 		}
/******/ 		if(parentJsonpFunction) parentJsonpFunction(chunkIds, moreModules, executeModules);
/******/ 		while(resolves.length) {
/******/ 			resolves.shift()();
/******/ 		}
/******/ 		if(executeModules) {
/******/ 			for(i=0; i < executeModules.length; i++) {
/******/ 				result = __webpack_require__(__webpack_require__.s = executeModules[i]);
/******/ 			}
/******/ 		}
/******/ 		return result;
/******/ 	};
/******/
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// objects to store loaded and loading chunks
/******/ 	var installedChunks = {
/******/ 		16: 0
/******/ 	};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/ 	// This file contains only the entry chunk.
/******/ 	// The chunk loading function for additional chunks
/******/ 	__webpack_require__.e = function requireEnsure(chunkId) {
/******/ 		var installedChunkData = installedChunks[chunkId];
/******/ 		if(installedChunkData === 0) {
/******/ 			return new Promise(function(resolve) { resolve(); });
/******/ 		}
/******/
/******/ 		// a Promise means "currently loading".
/******/ 		if(installedChunkData) {
/******/ 			return installedChunkData[2];
/******/ 		}
/******/
/******/ 		// setup Promise in chunk cache
/******/ 		var promise = new Promise(function(resolve, reject) {
/******/ 			installedChunkData = installedChunks[chunkId] = [resolve, reject];
/******/ 		});
/******/ 		installedChunkData[2] = promise;
/******/
/******/ 		// start chunk loading
/******/ 		var head = document.getElementsByTagName('head')[0];
/******/ 		var script = document.createElement('script');
/******/ 		script.type = 'text/javascript';
/******/ 		script.charset = 'utf-8';
/******/ 		script.async = true;
/******/ 		script.timeout = 120000;
/******/
/******/ 		if (__webpack_require__.nc) {
/******/ 			script.setAttribute("nonce", __webpack_require__.nc);
/******/ 		}
/******/ 		script.src = __webpack_require__.p + "" + chunkId + ".js";
/******/ 		var timeout = setTimeout(onScriptComplete, 120000);
/******/ 		script.onerror = script.onload = onScriptComplete;
/******/ 		function onScriptComplete() {
/******/ 			// avoid mem leaks in IE.
/******/ 			script.onerror = script.onload = null;
/******/ 			clearTimeout(timeout);
/******/ 			var chunk = installedChunks[chunkId];
/******/ 			if(chunk !== 0) {
/******/ 				if(chunk) {
/******/ 					chunk[1](new Error('Loading chunk ' + chunkId + ' failed.'));
/******/ 				}
/******/ 				installedChunks[chunkId] = undefined;
/******/ 			}
/******/ 		};
/******/ 		head.appendChild(script);
/******/
/******/ 		return promise;
/******/ 	};
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// on error function for async loading
/******/ 	__webpack_require__.oe = function(err) { console.error(err); throw err; };
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 21);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/*!*****************************************!*\
  !*** ./node_modules/execon/lib/exec.js ***!
  \*****************************************/
/*! no static exports found */
/*! all exports used */
/***/ (function(module, exports) {

eval("(function(global) {\n    'use strict';\n    \n    if (typeof module === 'object' && module.exports)\n        module.exports = new ExecProto();\n    else\n        global.exec = new ExecProto();\n        \n    function ExecProto() {\n        var slice = Array.prototype.slice,\n            /**\n             * function do save exec of function\n             * @param callback\n             * @param arg1\n             * ...\n             * @param argN\n             */\n            exec        = function(callback) {\n                var ret,\n                    isFunc  = typeof callback === 'function',\n                    args    = slice.call(arguments, 1);\n               \n                if (isFunc)\n                    ret     = callback.apply(null, args);\n                \n                return ret;\n            };\n        \n        /*\n         * return function that calls callback with arguments\n         */\n        exec.with           =  function(callback) {\n            var slice   = Array.prototype.slice,\n                args    = slice.call(arguments, 1);\n            \n            return function() {\n                var array   = slice.call(arguments), \n                    all     = args.concat(array);\n                \n                return callback.apply(null, all);\n            };\n        };\n         \n         /**\n         * return save exec function\n         * @param callback\n         */\n        exec.ret        = function() {\n            var result,\n                args        = slice.call(arguments);\n            \n            args.unshift(exec);\n            result          = exec.with.apply(null, args);\n            \n            return result;\n        };\n        \n        /**\n         * function do conditional save exec of function\n         * @param condition\n         * @param callback\n         * @param func\n         */\n        exec.if         = function(condition, callback, func) {\n            var ret;\n            \n            if (condition)\n                exec(callback);\n            else\n                exec(func, callback);\n            \n            return ret;\n        };\n        \n        /**\n         * exec function if it exist in object\n         * \n         * @param obj\n         * @param name\n         * @param arg\n         */\n        exec.ifExist                = function(obj, name, arg) {\n            var ret,\n                func    = obj && obj[name];\n            \n            if (func)\n                func    = func.apply(obj, arg);\n            \n            return ret;\n        };\n        \n        exec.parallel   = function(funcs, callback) {\n            var ERROR       = 'could not be empty!',\n                keys        = [],\n                callbackWas = false,\n                arr         = [],\n                obj         = {},\n                count       = 0,\n                countFuncs  = 0,\n                type        = getType(funcs);\n            \n            if (!funcs)\n                throw Error('funcs ' + ERROR);\n            \n            if (!callback)\n                throw Error('callback ' + ERROR);\n            \n            switch(type) {\n            case 'array':\n                countFuncs  = funcs.length;\n                \n                funcs.forEach(function(func, num) {\n                    exec(func, function() {\n                        checkFunc(num, arguments);\n                    });\n                });\n                break;\n            \n            case 'object':\n                keys        = Object.keys(funcs);\n                countFuncs  = keys.length;\n                \n                keys.forEach(function(name) {\n                    var func    = funcs[name];\n                    \n                    exec(func, function() {\n                        checkFunc(name, arguments, obj);\n                    });\n                });\n                break;\n            }\n            \n            function checkFunc(num, data) {\n                var args    = slice.call(data, 1),\n                    isLast  = false,\n                    error   = data[0],\n                    length  = args.length;\n                \n                ++count;\n                \n                isLast = count === countFuncs;\n                \n                if (!error)\n                    if (length >= 2)\n                        arr[num] = args;\n                    else\n                        arr[num] = args[0];\n                \n                if (!callbackWas && (error || isLast)) {\n                    callbackWas = true;\n                    \n                    if (type === 'array')\n                        callback.apply(null, [error].concat(arr));\n                    else\n                        callback(error, arr);\n                }\n            }\n        };\n        \n        /**\n         * load functions thrue callbacks one-by-one\n         * @param funcs {Array} - array of functions\n         */\n        exec.series             = function(funcs, callback) {\n            var fn,\n                i           = funcs.length,\n                check       = function(error) {\n                    var done;\n                    \n                    --i;\n                    \n                    if (!i || error) {\n                        done = true;\n                        exec(callback, error);\n                    }\n                    \n                    return done;\n                };\n            \n            if (!Array.isArray(funcs))\n                throw Error('funcs should be array!');\n            \n            fn = funcs.shift();\n            \n            exec(fn, function(error) {\n                if (!check(error))\n                    exec.series(funcs, callback);\n            });\n        };\n        \n        exec.each               = function(array, iterator, callback) {\n            var listeners = array.map(function(item) {\n                return iterator.bind(null, item);\n            });\n            \n            if (!listeners.length)\n                callback();\n            else\n                exec.parallel(listeners, callback);\n        };\n            \n        exec.eachSeries         = function(array, iterator, callback) {\n            var listeners = array.map(function(item) {\n                return iterator.bind(null, item);\n            });\n            \n            if (typeof callback !== 'function')\n                throw Error('callback should be function');\n            \n            if (!listeners.length)\n                callback();\n            else\n                exec.series(listeners, callback);\n        };\n        \n       /**\n         * function execute param function in\n         * try...catch block\n         * \n         * @param callback\n         */\n        exec.try                = function(callback) {\n            var ret;\n            try {\n                ret = callback();\n            } catch(error) {\n                ret = error;\n            }\n            \n            return ret;\n        };\n        \n        function getType(variable) {\n            var regExp      = new RegExp('\\\\s([a-zA-Z]+)'),\n                str         = {}.toString.call(variable),\n                typeBig     = str.match(regExp)[1],\n                result      = typeBig.toLowerCase();\n            \n            return result;\n        } \n        \n        return exec;\n    }\n})(this);\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/execon/lib/exec.js\n// module id = 0\n// module chunks = 16\n\n//# sourceURL=file://cloudcmd/node_modules/execon/lib/exec.js");

/***/ }),
/* 1 */
/*!******************************!*\
  !*** ./client/dom/images.js ***!
  \******************************/
/*! no static exports found */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* global CloudCmd */\n\n\n\nconst DOM = __webpack_require__(/*! ./ */ 8);\n\nconst Images = module.exports;\n\nconst LOADING = 'loading';\nconst HIDDEN = 'hidden';\nconst ERROR = 'error';\n\nconst LoadingImage = LOADING + getLoadingType();\n\nfunction getLoadingType() {\n    return isSVG() ? '-svg' : '-gif';\n}\n\nmodule.exports.get = getElement;\n\n/**\n * check SVG SMIL animation support\n */\nfunction isSVG() {\n    const createNS = document.createElementNS;\n    const SVG_URL = 'http://www.w3.org/2000/svg';\n    \n    if (!createNS)\n        return false;\n    \n    const create = createNS.bind(document);\n    const svgNode = create(SVG_URL, 'animate');\n    const name = svgNode.toString();\n    \n    return /SVGAnimate/.test(name);\n}\n\n\nfunction getElement() {\n    return DOM.load({\n        name        : 'span',\n        id          : 'js-status-image',\n        className   : 'icon',\n        attribute   : 'data-progress',\n        notAppend   : true\n    });\n}\n\n/* Функция создаёт картинку загрузки */\nmodule.exports.loading = () => {\n    const element = getElement();\n    const classList = element.classList;\n    \n    classList.add(LOADING, LoadingImage);\n    classList.remove(ERROR, HIDDEN);\n    \n    return element;\n};\n\n/* Функция создаёт картинку ошибки загрузки */\nmodule.exports.error = () => {\n    const element = getElement();\n    const classList = element.classList;\n    \n    classList.add(ERROR);\n    classList.remove(HIDDEN, LOADING, LoadingImage);\n    \n    return element;\n};\n\nmodule.exports.show = show;\nmodule.exports.show.load  = show;\nmodule.exports.show.error = error;\n\n/**\n* Function shows loading spinner\n* position = {top: true};\n*/\nfunction show(position, panel) {\n    const image = Images.loading();\n    const parent = image.parentElement;\n    const refreshButton = DOM.getRefreshButton(panel);\n    \n    let current;\n\n    if (position === 'top') {\n        current = refreshButton.parentElement;\n    } else {\n        current = DOM.getCurrentFile();\n        \n        if (current)\n            current = DOM.getByDataName('js-name', current);\n        else\n            current = refreshButton.parentElement;\n    }\n    \n    if (!parent || (parent && parent !== current))\n        current.appendChild(image);\n    \n    DOM.show(image);\n    \n    return image;\n}\n\nfunction error(text) {\n    const image = Images.error();\n    \n    DOM.show(image);\n    image.title = text;\n    \n    CloudCmd.log(text);\n    \n    return image;\n}\n\n/**\n* hide load image\n*/\nmodule.exports.hide = () => {\n    const element = Images.get();\n    \n    DOM.hide(element);\n    \n    return Images;\n};\n\nmodule.exports.setProgress = (value, title) => {\n    const DATA = 'data-progress';\n    const element = Images.get();\n     \n    if (!element)\n        return Images;\n    \n    element.setAttribute(DATA, value + '%');\n    \n    if (title)\n        element.title = title;\n    \n    return Images;\n};\n\nmodule.exports.clearProgress  = () => {\n    const DATA = 'data-progress';\n    const element = Images.get();\n    \n    if (!element)\n        return Images;\n    \n    element.setAttribute(DATA, '');\n    element.title = '';\n    \n    return Images;\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./client/dom/images.js\n// module id = 1\n// module chunks = 16\n\n//# sourceURL=file://cloudcmd/client/dom/images.js");

/***/ }),
/* 2 */
/*!****************************!*\
  !*** ./client/dom/load.js ***!
  \****************************/
/*! no static exports found */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst itype = __webpack_require__(/*! itype/legacy */ 4);\nconst jonny = __webpack_require__(/*! jonny */ 7);\nconst Emitify = __webpack_require__(/*! emitify/legacy */ 15);\nconst exec = __webpack_require__(/*! execon */ 0);\nconst Images = __webpack_require__(/*! ./images */ 1);\nconst Events = __webpack_require__(/*! ./events */ 9);\n\nconst {getExt} = __webpack_require__(/*! ../../common/util */ 5);\n\nmodule.exports = load;\nmodule.exports.getIdBySrc = getIdBySrc;\nmodule.exports.ext = ext;\n\n/**\n * Функция создаёт элемент и загружает файл с src.\n *\n * @param params = {\n * name, - название тэга\n * src', - путь к файлу\n * func, - обьект, содержаий одну из функций\n *          или сразу две onload и onerror\n *          {onload: function() {}, onerror: function();}\n * style,\n * id,\n * element,\n * async, - true by default\n * inner: 'id{color:red, },\n * class,\n * notAppend - false by default\n *\n */\nfunction load(params) {\n    const {\n        src,\n        id = getIdBySrc(params.src),\n        func,\n        name,\n        async,\n        inner,\n        style,\n        parent = document.body,\n        className,\n        attribute,\n        notAppend,\n    } = params;\n    \n    let element = document.getElementById(id);\n    \n    if (element) {\n        exec(func);\n        return element;\n    }\n    \n    element = document.createElement(name);\n    \n    const funcError = () => {\n        const msg = `file ${src} could not be loaded`;\n        const error = new Error(msg);\n        \n        parent.removeChild(element);\n        \n        Images.show.error(msg);\n        \n        const callback = func && func.onerror || func.onload || func;\n        \n        exec(callback, error);\n    };\n    \n    const funcLoad = () => {\n        const callback = func && func.onload || func;\n        \n        Events.remove('error', element, funcError);\n        \n        exec(callback);\n    };\n    \n    if (/^(script|link)$/.test(name))\n        Events.addOnce('load', element, funcLoad)\n            .addError(element, funcError);\n    \n    if (id)\n        element.id = id;\n    \n    if (className)\n        element.className = className;\n    \n    if (src) {\n        if (name !== 'link') {\n            element.src = src;\n        } else {\n            element.href = src;\n            element.rel = 'stylesheet';\n        }\n    }\n    \n    if (attribute) {\n        const type = itype(attribute);\n        \n        switch(type) {\n        case 'string':\n            element.setAttribute(attribute, '');\n            break;\n        \n        case 'object':\n            Object.keys(attribute).forEach((name) => {\n                element.setAttribute(name, attribute[name]);\n            });\n            break;\n        }\n    }\n    \n    if (style)\n        element.style.cssText = style;\n    \n    if (async && name === 'script' || async === undefined)\n        element.async = true;\n    \n    if (!notAppend)\n        parent.appendChild(element);\n    \n    if (inner)\n        element.innerHTML = inner;\n    \n    return element;\n}\n\n/**\n * Function gets id by src\n * @param src\n *\n * Example: http://domain.com/1.js -> 1_js\n */\nfunction getIdBySrc(src) {\n    const isStr = itype.string(src);\n    \n    if (!isStr)\n        return;\n    \n    if (~src.indexOf(':'))\n        src += '-join';\n    \n    const num = src.lastIndexOf('/') + 1;\n    const sub = src.substr(src, num);\n    const id = src\n        .replace(sub, '')\n        .replace(/\\./g, '-');\n    \n    return id;\n}\n\n/**\n * load file countent via ajax\n *\n * @param params\n */\nmodule.exports.ajax = (params) => {\n    const p = params;\n    const isObject = itype.object(p.data);\n    const isArray = itype.array(p.data);\n    const isArrayBuf = itype(p.data) === 'arraybuffer';\n    const type = p.type || p.method || 'GET';\n    const headers = p.headers || {};\n    const xhr = new XMLHttpRequest();\n    \n    xhr.open(type, p.url, true);\n    \n    Object.keys(headers).forEach((name) => {\n        const value = headers[name];\n        xhr.setRequestHeader(name, value);\n    });\n    \n    if (p.responseType)\n        xhr.responseType = p.responseType;\n    \n    let data;\n    if (!isArrayBuf && isObject || isArray)\n        data = jonny.stringify(p.data);\n    else\n        data = p.data;\n    \n    xhr.onreadystatechange = (event) => {\n        const xhr = event.target;\n        const OK  = 200;\n        \n        if (xhr.readyState !== xhr.DONE)\n            return;\n        \n        Images.clearProgress();\n        \n        const TYPE_JSON = 'application/json';\n        const type        = xhr.getResponseHeader('content-type');\n        \n        if (xhr.status !== OK)\n            return exec(p.error, xhr);\n        \n        const notText = p.dataType !== 'text';\n        const isContain = ~type.indexOf(TYPE_JSON);\n        \n        let data = xhr.response;\n        if (type && isContain && notText)\n            data = jonny.parse(xhr.response) || xhr.response;\n            \n        exec(p.success, data, xhr.statusText, xhr);\n    };\n    \n    xhr.send(data);\n};\n\nmodule.exports.put = (url, body) => {\n    const emitter = Emitify();\n    const xhr = new XMLHttpRequest();\n    \n    url = encodeURI(url)\n        .replace('#', '%23');\n    \n    xhr.open('put', url, true);\n    \n    xhr.upload.onprogress = (event) => {\n        var percent, count;\n        \n        if (event.lengthComputable) {\n            percent = (event.loaded / event.total) * 100;\n            count   = Math.round(percent);\n            \n            emitter.emit('progress', count);\n        }\n    \n    };\n    \n    xhr.onreadystatechange = () => {\n        const over = xhr.readyState === xhr.DONE;\n        const OK = 200;\n        \n        if (!over)\n            return;\n        \n        if (xhr.status === OK)\n            return emitter.emit('end');\n        \n        const error = Error(xhr.responseText);\n        emitter.emit('error', error);\n    };\n    \n    xhr.send(body);\n    \n    return emitter;\n};\n\nfunction ext(src, func) {\n    switch (getExt(src)) {\n    case '.js':\n        return load.js(src, func);\n    \n    case '.css':\n        return load.css(src, func);\n    \n    default:\n        return load({\n            src,\n            func,\n        });\n    }\n}\n\n/**\n * create elements and load them to DOM-tree\n * one-by-one\n *\n * @param params\n * @param callback\n */\nload.series = (params, callback) => {\n    if (!params)\n        return load;\n    \n    const funcs = params\n        .map((url) => ext.bind(null, url))\n        .concat(callback);\n    \n    exec.series(funcs);\n    \n    return load;\n};\n\n/**\n * improve callback of funcs so\n * we pop number of function and\n * if it's last we call pCallBack\n *\n * @param params\n * @param callback - onload function\n */\nload.parallel = (params, callback) => {\n    if (!params)\n        return load;\n    \n    const funcs = params.map((url) => {\n        return ext.bind(null, url);\n    });\n    \n    exec.parallel(funcs, callback);\n    \n    return load;\n};\n\n/**\n * Функция загружает js-файл\n *\n * @param src\n * @param func\n */\nload.js = (src, func) => {\n    const name = 'script';\n    \n    return load({\n        name,\n        src,\n        func,\n    });\n},\n\nload.css = (src, func) => {\n    const name = 'link';\n    const {head:parent} = document;\n    \n    return load({\n        name,\n        src,\n        parent,\n        func\n    });\n};\n\n/**\n * Функция создаёт елемент style и записывает туда стили\n * @param params - структура параметров, заполняеться таким\n * образом: {src: ' ',func: '', id: '', element: '', inner: ''}\n * все параметры опциональны\n */\nload.style = (params) => {\n    const {\n        id,\n        src,\n        name = 'style',\n        func,\n        inner,\n        parent = document.head,\n        element,\n    } = params;\n    \n    return load({\n        id,\n        src,\n        func,\n        name,\n        inner,\n        parent,\n        element,\n    });\n};\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./client/dom/load.js\n// module id = 2\n// module chunks = 16\n\n//# sourceURL=file://cloudcmd/client/dom/load.js");

/***/ }),
/* 3 */
/*!*****************************!*\
  !*** ./common/cloudfunc.js ***!
  \*****************************/
/*! no static exports found */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst rendy = __webpack_require__(/*! rendy */ 11);\nconst currify = __webpack_require__(/*! currify/legacy */ 6);\nconst store = __webpack_require__(/*! fullstore/legacy */ 12);\nconst Entity = __webpack_require__(/*! ./entity */ 28);\n\nconst getHeaderField = currify(_getHeaderField);\n\n/* КОНСТАНТЫ (общие для клиента и сервера)*/\n\n/* название программы */\nconst NAME = 'Cloud Commander';\nconst FS = '/fs';\n\nconst Path = store();\n\nPath('/');\n\nmodule.exports.FS = FS;\nmodule.exports.apiURL = '/api/v1';\nmodule.exports.MAX_FILE_SIZE = 500 * 1024;\nmodule.exports.Entity = Entity;\nmodule.exports.getHeaderField = getHeaderField;\nmodule.exports.getPathLink = getPathLink;\nmodule.exports.getDotDot = getDotDot;\n\nmodule.exports.formatMsg = (msg, name, status) => {\n    status = status || 'ok';\n    name = name || '';\n    \n    if (name)\n        name = '(\"' + name + '\")';\n    \n    return msg + ': ' + status + name;\n};\n\n/**\n * Функция возвращает заголовок веб страницы\n * @path\n */\nmodule.exports.getTitle = (options) => {\n    options = options || {};\n    \n    const path = options.path || Path();\n    const name = options.name;\n    \n    const array = [\n        name || NAME,\n        path,\n    ];\n    \n    return array\n        .filter(Boolean)\n        .join(' - ');\n};\n\n/** Функция получает адреса каждого каталога в пути\n * возвращаеться массив каталогов\n * @param url -  адрес каталога\n */\nfunction getPathLink(url, prefix, template) {\n    if (!url)\n        throw Error('url could not be empty!');\n    \n    if (!template)\n        throw Error('template could not be empty!');\n    \n    const names = url\n        .split('/')\n        .slice(1, -1);\n    \n    const allNames = ['/'].concat(names);\n    const length = allNames.length - 1;\n    \n    let path = '/';\n    \n    const pathHTML = allNames.map((name, index) => {\n        const isLast = index === length;\n        \n        if (index)\n            path += name + '/';\n        \n        if (index && isLast)\n            return name + '/';\n        \n        const slash = index ? '/' : '';\n        \n        return rendy(template, {\n            path,\n            name,\n            slash,\n            prefix,\n        });\n    }).join('');\n    \n    return pathHTML;\n}\n\n/**\n * Функция строит таблицу файлв из JSON-информации о файлах\n * @param params - информация о файлах\n *\n */\nmodule.exports.buildFromJSON = (params) => {\n    const prefix = params.prefix;\n    const template = params.template;\n    const templateFile = template.file;\n    const templateLink = template.link;\n    const json = params.data;\n    \n    const path = json.path;\n    const files = json.files;\n    \n    const sort = params.sort || 'name';\n    const order = params.order || 'asc';\n    \n    /*\n     * Строим путь каталога в котором мы находимся\n     * со всеми подкаталогами\n     */\n    const htmlPath = getPathLink(path, prefix, template.pathLink);\n    \n    let fileTable = rendy(template.path, {\n        link        : prefix + FS + path,\n        fullPath    : path,\n        path        : htmlPath\n    });\n    \n    const owner = 'owner';\n    const mode = 'mode';\n    \n    const getFieldName = getHeaderField(sort, order);\n    \n    const name = getFieldName('name');\n    const size = getFieldName('size');\n    const date = getFieldName('date');\n    \n    const header = rendy(templateFile, {\n        tag         : 'div',\n        attribute   : 'data-name=\"js-fm-header\" ',\n        className   : 'fm-header',\n        type        : '',\n        name,\n        size,\n        date,\n        owner,\n        mode,\n    });\n    \n    /* сохраняем путь */\n    Path(path);\n    \n    fileTable += header + '<ul data-name=\"js-files\" class=\"files\">';\n    /* Если мы не в корне */\n    if (path !== '/') {\n        const dotDot = getDotDot(path);\n        const link = prefix + FS + dotDot;\n        \n        const linkResult = rendy(template.link, {\n            link,\n            title       : '..',\n            name        : '..'\n        });\n        \n        const dataName = 'data-name=\"js-file-..\" ';\n        const attribute = 'draggable=\"true\" ' + dataName;\n        \n        /* Сохраняем путь к каталогу верхнего уровня*/\n        fileTable += rendy(template.file, {\n            tag         : 'li',\n            attribute,\n            className   : '',\n            type        : 'directory',\n            name        : linkResult,\n            size        : '&lt;dir&gt;',\n            date        : '--.--.----',\n            owner       : '.',\n            mode        : '--- --- ---'\n        });\n    }\n    \n    fileTable += files.map((file) => {\n        const link = prefix + FS + path + file.name;\n        \n        const type = getType(file.size);\n        const size = getSize(file.size);\n        \n        const date = file.date || '--.--.----';\n        const owner = file.owner || 'root';\n        const mode = file.mode;\n        \n        const linkResult = rendy(templateLink, {\n            link,\n            title: file.name,\n            name: Entity.encode(file.name),\n            attribute: getAttribute(file.size)\n        });\n        \n        const dataName = 'data-name=\"js-file-' + file.name + '\" ';\n        const attribute = 'draggable=\"true\" ' + dataName;\n        \n        return rendy(templateFile, {\n            tag: 'li',\n            attribute,\n            className: '',\n            type,\n            name: linkResult,\n            size,\n            date,\n            owner,\n            mode,\n        });\n    }).join('');\n    \n    fileTable += '</ul>';\n    \n    return fileTable;\n};\n\nfunction getType(size) {\n    if (size === 'dir')\n        return 'directory';\n    \n    return 'text-file';\n}\n\nfunction getAttribute(size) {\n    if (size === 'dir')\n        return '';\n    \n    return 'target=\"_blank\" ';\n}\n\nfunction getSize(size) {\n    if (size === 'dir')\n        return '&lt;dir&gt;';\n    \n    return size;\n}\n\nfunction _getHeaderField(sort, order, name) {\n    const arrow = order === 'asc' ?  '↑' : '↓';\n    \n    if (sort !== name)\n        return name;\n    \n    if (sort === 'name' && order === 'asc')\n        return name;\n    \n    return `${name}${arrow}`;\n}\n\nfunction getDotDot(path) {\n    // убираем последний слеш и каталог в котором мы сейчас находимся\n    const lastSlash = path.substr(path, path.lastIndexOf('/'));\n    const dotDot = lastSlash.substr(lastSlash, lastSlash.lastIndexOf('/'));\n    \n    if (!dotDot)\n        return '/';\n    \n    return dotDot;\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./common/cloudfunc.js\n// module id = 3\n// module chunks = 16\n\n//# sourceURL=file://cloudcmd/common/cloudfunc.js");

/***/ }),
/* 4 */
/*!********************************************!*\
  !*** ./node_modules/itype/legacy/index.js ***!
  \********************************************/
/*! no static exports found */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

eval("module.exports = __webpack_require__(/*! ./lib/itype */ 29);\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/itype/legacy/index.js\n// module id = 4\n// module chunks = 16\n\n//# sourceURL=file://cloudcmd/node_modules/itype/legacy/index.js");

/***/ }),
/* 5 */
/*!************************!*\
  !*** ./common/util.js ***!
  \************************/
/*! no static exports found */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* WEBPACK VAR INJECTION */(function(global) {\n\nconst exec = __webpack_require__(/*! execon */ 0);\nconst jonny = __webpack_require__(/*! jonny */ 7);\n\nconst Scope = typeof window !== 'undefined' ? window : global;\n\nmodule.exports.getStrBigFirst = getStrBigFirst;\nmodule.exports.kebabToCamelCase = kebabToCamelCase;\nmodule.exports.json = jonny;\n\nmodule.exports.escapeRegExp = (str) => {\n    const isStr = typeof str === 'string';\n    \n    if (isStr)\n        str = str.replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, '\\\\$&');\n    \n    return str;\n};\n\n/**\n * get regexp from wild card\n */\nmodule.exports.getRegExp = (wildcard) => {\n    wildcard = wildcard || '*';\n    \n    const escaped = '^' + wildcard // search from start of line\n        .replace('.', '\\\\.')\n        .replace('*', '.*')\n        .replace('?', '.?') + '$'; // search to end of line\n    \n    return RegExp(escaped);\n};\n\nmodule.exports.exec = exec;\n\n/**\n * function gets file extension\n *\n * @param name\n * @return ext\n */\nmodule.exports.getExt = (name) => {\n    const isStr = typeof name === 'string';\n    \n    if (!isStr)\n        return '';\n    \n    const dot = name.lastIndexOf('.');\n    \n    if (~dot)\n        return name.substr(dot);\n    \n    return '';\n};\n\n/**\n * find object by name in arrray\n *\n * @param array\n * @param name\n */\nmodule.exports.findObjByNameInArr = (array, name) => {\n    let ret;\n    \n    if (!Array.isArray(array))\n        throw Error('array should be array!');\n        \n    if (typeof name !== 'string')\n        throw Error('name should be string!');\n    \n    array.some((item) => {\n        let is = item.name === name;\n        const isArray = Array.isArray(item);\n        \n        if (is) {\n            ret = item;\n            return is;\n        }\n        \n        if (!isArray)\n            return is;\n        \n        return item.some((item) => {\n            const is = item.name === name;\n            \n            if (is)\n                ret = item.data;\n            \n            return is;\n        });\n    });\n    \n    return ret;\n};\n\n/**\n * start timer\n * @param name\n */\nmodule.exports.time = (name) => {\n    exec.ifExist(Scope.console, 'time', [name]);\n};\n\n/**\n * stop timer\n * @param name\n */\nmodule.exports.timeEnd = (name) => {\n    exec.ifExist(Scope.console, 'timeEnd', [name]);\n};\n\nfunction getStrBigFirst(str) {\n    if (!str)\n        throw Error('str could not be empty!');\n    \n    const first = str[0].toUpperCase();\n    \n    return first + str.slice(1);\n}\n\nfunction kebabToCamelCase(str) {\n    if (!str)\n        throw Error('str could not be empty!');\n    \n    return str\n        .split('-')\n        .map(getStrBigFirst)\n        .join('')\n        .replace(/.js$/, '');\n}\n\n\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! ./../node_modules/webpack/buildin/global.js */ 16)))\n\n//////////////////\n// WEBPACK FOOTER\n// ./common/util.js\n// module id = 5\n// module chunks = 16\n\n//# sourceURL=file://cloudcmd/common/util.js");

/***/ }),
/* 6 */
/*!**********************************************!*\
  !*** ./node_modules/currify/legacy/index.js ***!
  \**********************************************/
/*! no static exports found */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

eval("module.exports = __webpack_require__(/*! ./lib/currify */ 26);\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/currify/legacy/index.js\n// module id = 6\n// module chunks = 16\n\n//# sourceURL=file://cloudcmd/node_modules/currify/legacy/index.js");

/***/ }),
/* 7 */
/*!*****************************************!*\
  !*** ./node_modules/jonny/lib/jonny.js ***!
  \*****************************************/
/*! no static exports found */
/*! all exports used */
/***/ (function(module, exports) {

eval("(function(global) {\n    'use strict';\n    \n    if (typeof module !== 'undefined' && module.exports)\n        module.exports  = new Jonny();\n    else\n        global.jonny    = new Jonny();\n    \n    function Jonny() {\n        this.parse      = function() {\n            var ret,\n                args = arguments;\n            \n            tryCatch(function() {\n                ret = JSON.parse.apply(JSON, args);\n            });\n            \n            return ret;\n        };\n        \n        this.stringify  = function() {\n            var ret,\n                args = arguments;\n            \n            tryCatch(function() {\n                ret = JSON.stringify.apply(JSON, args);\n            });\n            \n            return ret;\n        };\n        \n        function tryCatch(fn) {\n            var error;\n            \n            try {\n                fn();\n            } catch(e) {\n                error = e;\n            }\n            \n            return error;\n        }\n    }\n    \n})(this);\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/jonny/lib/jonny.js\n// module id = 7\n// module chunks = 16\n\n//# sourceURL=file://cloudcmd/node_modules/jonny/lib/jonny.js");

/***/ }),
/* 8 */
/*!*****************************!*\
  !*** ./client/dom/index.js ***!
  \*****************************/
/*! no static exports found */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* global CloudCmd */\n\n\n\nconst itype = __webpack_require__(/*! itype/legacy */ 4);\nconst exec = __webpack_require__(/*! execon */ 0);\nconst jonny = __webpack_require__(/*! jonny */ 7);\nconst Util = __webpack_require__(/*! ../../common/util */ 5);\n\nconst {\n    getTitle,\n    FS,\n    Entity,\n} = __webpack_require__(/*! ../../common/cloudfunc */ 3);\n\nconst DOMTree = __webpack_require__(/*! ./dom-tree */ 30);\n\nconst DOM = Object.assign({}, DOMTree, new CmdProto());\n\nmodule.exports = DOM;\n\nconst Images = __webpack_require__(/*! ./images */ 1);\nconst load = __webpack_require__(/*! ./load */ 2);\nconst Files = __webpack_require__(/*! ./files */ 10);\nconst RESTful = __webpack_require__(/*! ./rest */ 13);\nconst Storage = __webpack_require__(/*! ./storage */ 14);\n\nDOM.Images = Images;\nDOM.load = load;\nDOM.Files = Files;\nDOM.RESTful = RESTful;\nDOM.Storage = Storage;\n\nDOM.uploadDirectory = __webpack_require__(/*! ./directory */ 31);\nDOM.Buffer = __webpack_require__(/*! ./buffer */ 17);\nDOM.Events = __webpack_require__(/*! ./events */ 9);\n\nconst loadRemote = __webpack_require__(/*! ./load-remote */ 32);\nconst selectByPattern = __webpack_require__(/*! ./select-by-pattern */ 33);\n\nfunction CmdProto() {\n    let Title;\n    let CurrentInfo = {};\n    \n    const Cmd = this;\n    const CURRENT_FILE = 'current-file';\n    const SELECTED_FILE = 'selected-file';\n    const TITLE = 'Cloud Commander';\n    const TabPanel = {\n        'js-left'        : null,\n        'js-right'       : null\n    };\n    \n    this.loadRemote = (name, options, callback) => {\n        loadRemote(name, options, callback);\n        return DOM;\n    };\n    /**\n     * load jquery from google cdn or local copy\n     * @param callback\n     */\n    this.loadJquery = function(callback) {\n        DOM.loadRemote('jquery', {\n            name    : '$'\n        }, callback);\n        \n        return DOM;\n    };\n    \n    this.loadSocket = function(callback) {\n        DOM.loadRemote('socket', {\n            name    : 'io'\n        }, callback);\n        \n        return DOM;\n    };\n    \n    /** function loads css and js of Menu\n     * @param callback\n     */\n    this.loadMenu = function(callback) {\n        return DOM.loadRemote('menu', callback);\n    };\n    \n    /**\n     * create new folder\n     *\n     */\n    this.promptNewDir        = function() {\n        promptNew('directory', '?dir');\n    };\n    \n    /**\n     * create new file\n     *\n     * @typeName\n     * @type\n     */\n    this.promptNewFile = () => {\n        promptNew('file');\n    };\n    \n    function promptNew(typeName, type) {\n        const {Dialog} = DOM;\n        const dir = Cmd.getCurrentDirPath();\n        const msg = 'New ' + typeName || 'File';\n        const getName = () => {\n            const name = Cmd.getCurrentName();\n            \n            if (name === '..')\n                return '';\n             \n            return name;\n        };\n        \n        const name = getName();\n        const cancel = false;\n        \n        Dialog.prompt(TITLE, msg, name, {cancel}).then((name) => {\n            if (!name)\n                return;\n            \n            const path = (type) => {\n                const result = dir + name;\n                \n                if (!type)\n                    return result;\n                \n                return result + type;\n            };\n            \n            RESTful.write(path(type), (error) => {\n                if (error)\n                    return;\n                \n                const currentName = name;\n                \n                CloudCmd.refresh({\n                    currentName\n                });\n            });\n        });\n    }\n    \n    /**\n     * get current direcotory name\n     */\n    this.getCurrentDirName = () => {\n        const href = DOM.getCurrentDirPath()\n            .replace(/\\/$/, '');\n        \n        const substr  = href.substr(href, href.lastIndexOf('/'));\n        const ret     = href.replace(substr + '/', '') || '/';\n        \n        return ret;\n    };\n    \n    /**\n     * get current direcotory path\n     */\n    this.getCurrentDirPath = (panel = DOM.getPanel()) => {\n        const path =  DOM.getByDataName('js-path', panel);\n        const ret = path && path.textContent;\n        \n        return ret;\n    };\n    \n    /**\n     * get current direcotory path\n     */\n    this.getParentDirPath = (panel) => {\n        const path = DOM.getCurrentDirPath(panel);\n        const dirName = DOM.getCurrentDirName() + '/';\n        \n        if (path !== '/')\n            return path.replace(RegExp(dirName + '$'), '');\n        \n        return path;\n    };\n    \n    /**\n     * get not current direcotory path\n     */\n    this.getNotCurrentDirPath = () => {\n        const panel = DOM.getPanel({active: false});\n        const path = DOM.getCurrentDirPath(panel);\n        \n        return path;\n    };\n    \n    /**\n     * unified way to get current file\n     *\n     * @currentFile\n     */\n    this.getCurrentFile = () => {\n        return DOM.getByClass(CURRENT_FILE);\n    };\n    \n    /**\n     * get current file by name\n     */\n    this.getCurrentByName = (name, panel = CurrentInfo.panel) => {\n        const dataName = 'js-file-' + name;\n        const element = DOM.getByDataName(dataName, panel);\n        \n        return element;\n    };\n    \n    /**\n     * unified way to get current file\n     *\n     * @currentFile\n     */\n    this.getSelectedFiles = () => {\n        const panel = DOM.getPanel();\n        const selected = DOM.getByClassAll(SELECTED_FILE, panel);\n        \n        return [...selected];\n    };\n    \n    /*\n     * unselect all files\n     */\n    this.unselectFiles = (files) => {\n        files = files || DOM.getSelectedFiles();\n        \n        [...files].forEach(DOM.toggleSelectedFile);\n    };\n    \n    /**\n     * get all selected files or current when none selected\n     *\n     * @currentFile\n     */\n    this.getActiveFiles = () => {\n        const current = DOM.getCurrentFile();\n        const files = DOM.getSelectedFiles();\n        const name = DOM.getCurrentName(current);\n        \n        if (!files.length && name !== '..')\n            return [current];\n        \n        return files;\n    };\n    \n    this.getCurrentDate = (currentFile) => {\n        const current = currentFile || Cmd.getCurrentFile();\n        const date = DOM\n            .getByDataName('js-date', current)\n            .textContent;\n        \n        return date;\n    };\n    \n    /**\n     * get size\n     * @currentFile\n     */\n    this.getCurrentSize = (currentFile) => {\n        const current = currentFile || Cmd.getCurrentFile();\n        /* если это папка - возвращаем слово dir вместо размера*/\n        const size = DOM.getByDataName('js-size', current)\n            .textContent\n            .replace(/^<|>$/g, '');\n        \n        return size;\n    };\n    \n    /**\n     * get size\n     * @currentFile\n     */\n    this.loadCurrentSize = (callback, currentFile) => {\n        const current = currentFile || DOM.getCurrentFile();\n        const query = '?size';\n        const link = DOM.getCurrentPath(current);\n        \n        Images.show.load();\n        \n        if (name === '..')\n            return;\n        \n        RESTful.read(link + query, (error, size) => {\n            if (error)\n                return;\n                \n            DOM.setCurrentSize(size, current);\n            exec(callback, current);\n            Images.hide();\n        });\n    };\n    \n    /**\n     * load hash\n     * @callback\n     * @currentFile\n     */\n    this.loadCurrentHash = (callback, currentFile) => {\n        const current = currentFile || DOM.getCurrentFile();\n        const query = '?hash';\n        const link = DOM.getCurrentPath(current);\n        \n        RESTful.read(link + query, callback);\n    };\n    \n    /**\n     * load current modification time of file\n     * @callback\n     * @currentFile\n     */\n    this.loadCurrentTime = (callback, currentFile) => {\n        const current = currentFile || DOM.getCurrentFile();\n        const query = '?time';\n        const link = DOM.getCurrentPath(current);\n        \n        RESTful.read(link + query, callback);\n    };\n    \n    /**\n     * set size\n     * @currentFile\n     */\n    this.setCurrentSize = (size, currentFile) => {\n        const current = currentFile || DOM.getCurrentFile();\n        const sizeElement = DOM.getByDataName('js-size', current);\n        \n        sizeElement.textContent = size;\n    };\n    \n    /**\n     * @currentFile\n     */\n    this.getCurrentMode = (currentFile) => {\n        const current = currentFile || DOM.getCurrentFile();\n        const mode = DOM.getByDataName('js-mode', current);\n        \n        return mode.textContent;\n    };\n    \n    /**\n     * @currentFile\n     */\n    this.getCurrentOwner = (currentFile) => {\n        const current = currentFile || DOM.getCurrentFile();\n        const owner = DOM.getByDataName('js-owner', current);\n        \n        return owner.textContent;\n    };\n    \n    /**\n     * unified way to get current file content\n     *\n     * @param callback\n     * @param currentFile\n     */\n    this.getCurrentData = (callback, currentFile) => {\n        let hash;\n        const Dialog = DOM.Dialog;\n        const Info = DOM.CurrentInfo;\n        const current = currentFile || DOM.getCurrentFile();\n        const path = DOM.getCurrentPath(current);\n        const isDir = DOM.isCurrentIsDir(current);\n        \n        const func = (error, data) => {\n            const ONE_MEGABYTE = 1024 * 1024 * 1024;\n            \n            if (!error) {\n                if (itype.object(data))\n                    data = jonny.stringify(data);\n                \n                const length  = data.length;\n                \n                if (hash && length < ONE_MEGABYTE)\n                    DOM.saveDataToStorage(path, data, hash);\n            }\n            \n            callback(error, data);\n        };\n        \n        if (Info.name === '..') {\n            Dialog.alert.noFiles(TITLE);\n            return callback(Error('No files selected!'));\n        }\n        \n        if (isDir)\n            return RESTful.read(path, func);\n        \n        DOM.checkStorageHash(path, (error, equal, hashNew) => {\n            if (error)\n                return callback(error);\n            \n            if (equal)\n                return DOM.getDataFromStorage(path, callback);\n            \n            hash = hashNew;\n            RESTful.read(path, func);\n        });\n    };\n    \n    /**\n     * unified way to save current file content\n     *\n     * @callback - function({data, name}) {}\n     * @currentFile\n     */\n    this.saveCurrentData = (url, data, callback, query = '') => {\n        DOM.RESTful.write(url + query, data, (error) => {\n            !error && DOM.saveDataToStorage(url, data);\n        });\n    };\n    \n    /**\n     * unified way to get RefreshButton\n     */\n    this.getRefreshButton = (panel) => {\n        const currentPanel = panel || DOM.getPanel();\n        const refresh = DOM.getByDataName('js-refresh', currentPanel);\n        \n        return refresh;\n    };\n    \n    this.setCurrentByName = (name) => {\n        const current = DOM.getCurrentByName(name);\n        return DOM.setCurrentFile(current);\n    };\n    \n    /**\n     * private function thet unset currentfile\n     *\n     * @currentFile\n     */\n    function unsetCurrentFile(currentFile) {\n        const is = DOM.isCurrentFile(currentFile);\n        \n        if (!is)\n            return;\n        \n        currentFile.classList.remove(CURRENT_FILE);\n    }\n    \n    /**\n     * unified way to set current file\n     */\n    this.setCurrentFile = (currentFile, options) => {\n        const o = options;\n        const CENTER = true;\n        const currentFileWas = DOM.getCurrentFile();\n        \n        if (!currentFile)\n            return DOM;\n        \n        let pathWas = '';\n        \n        if (currentFileWas) {\n            pathWas = DOM.getCurrentDirPath();\n            unsetCurrentFile(currentFileWas);\n        }\n        \n        currentFile.classList.add(CURRENT_FILE);\n        \n        let path = DOM.getCurrentDirPath();\n        \n        const name = CloudCmd.config('name');\n        if (path !== pathWas) {\n            DOM.setTitle(getTitle({\n                name,\n                path,\n            }));\n            \n            /* history could be present\n             * but it should be false\n             * to prevent default behavior\n             */\n            if (!o || o.history !== false) {\n                if (path !== '/')\n                    path = FS + path;\n                \n                DOM.setHistory(path, null, path);\n            }\n        }\n        \n        /* scrolling to current file */\n        DOM.scrollIntoViewIfNeeded(currentFile, CENTER);\n        \n        Cmd.updateCurrentInfo(currentFile);\n        \n        return DOM;\n    };\n    \n    /*\n      * set current file by position\n      *\n      * @param layer    - element\n      * @param          - position {x, y}\n      */\n    this.getCurrentByPosition = ({x, y}) => {\n        const element = document.elementFromPoint(x, y);\n        \n        const getEl = (el) => {\n            const {tagName} = el;\n            const isChild = /A|SPAN|LI/.test(tagName);\n            \n            if (!isChild)\n                return null;\n            \n            if (tagName === 'A')\n                return el.parentElement.parentElement;\n            \n            if (tagName === 'SPAN')\n                return el.parentElement;\n            \n            return el;\n        };\n        \n        const el = getEl(element);\n        \n        if (el && el.tagName !== 'LI')\n            return null;\n        \n        return el;\n    };\n    \n    /**\n     * select current file\n     * @param currentFile\n     */\n    this.selectFile = (currentFile) => {\n        const current = currentFile || DOM.getCurrentFile();\n        \n        current.classList.add(SELECTED_FILE);\n        \n        return Cmd;\n    };\n    \n    this.unselectFile = (currentFile) => {\n        const current = currentFile || DOM.getCurrentFile();\n        \n        current.classList.remove(SELECTED_FILE);\n        \n        return Cmd;\n    };\n    \n    this.toggleSelectedFile = (currentFile) => {\n        const current = currentFile || DOM.getCurrentFile();\n        const name = DOM.getCurrentName(current);\n        \n        if (name === '..')\n            return Cmd;\n        \n        current.classList.toggle(SELECTED_FILE);\n        \n        return Cmd;\n    };\n    \n    this.toggleAllSelectedFiles = () => {\n        DOM.getAllFiles().map(DOM.toggleSelectedFile);\n        \n        return Cmd;\n    };\n    \n    this.selectAllFiles = () => {\n        DOM.getAllFiles().map(DOM.selectFile);\n        \n        return Cmd;\n    };\n    \n    this.getAllFiles = () => {\n        const panel = DOM.getPanel();\n        const files = DOM.getFiles(panel);\n        const name = DOM.getCurrentName(files[0]);\n        \n        const from = (a) => a === '..' ? 1 : 0;\n        const i = from(name);\n        \n        return [...files].slice(i);\n    };\n    \n    /**\n     * open dialog with expand selection\n     */\n    this.expandSelection = () => {\n        const msg = 'expand';\n        const files = CurrentInfo.files;\n        \n        selectByPattern(msg, files);\n    };\n    \n    /**\n     * open dialog with shrink selection\n     */\n    this.shrinkSelection = () => {\n        const msg = 'shrink';\n        const files = CurrentInfo.files;\n       \n        selectByPattern(msg, files);\n    };\n    \n    /**\n     * setting history wrapper\n     */\n    this.setHistory = (data, title, url) => {\n        const ret = window.history;\n        \n        url = CloudCmd.PREFIX + url;\n        \n        if (ret)\n            history.pushState(data, title, url);\n        \n        return ret;\n    };\n    \n    /**\n     * set title or create title element\n     *\n     * @param name\n     */\n    \n    this.setTitle = (name) => {\n        if (!Title)\n            Title = DOM.getByTag('title')[0] ||\n                    DOM.load({\n                        name            : 'title',\n                        innerHTML       : name,\n                        parentElement   : document.head\n                    });\n        \n        Title.textContent = name;\n        \n        return DOM;\n    };\n    \n    /**\n     * current file check\n     *\n     * @param currentFile\n     */\n    this.isCurrentFile = (currentFile) => {\n        if (!currentFile)\n            return false;\n        \n        return DOM.isContainClass(currentFile, CURRENT_FILE);\n    };\n    \n    /**\n     * selected file check\n     *\n     * @param currentFile\n     */\n    this.isSelected = (selected) => {\n        if (!selected)\n            return false;\n        \n        return DOM.isContainClass(selected, SELECTED_FILE);\n    };\n    \n    /**\n     * check is current file is a directory\n     *\n     * @param currentFile\n     */\n    this.isCurrentIsDir = (currentFile) => {\n        const current = currentFile || this.getCurrentFile();\n        const fileType = DOM.getByDataName('js-type', current);\n        const ret = DOM.isContainClass(fileType, 'directory');\n        \n        return ret;\n    };\n    \n    /**\n     * get link from current (or param) file\n     *\n     * @param currentFile - current file by default\n     */\n    this.getCurrentLink = (currentFile) => {\n        const current = currentFile || this.getCurrentFile();\n        const link = DOM.getByTag('a', current);\n        \n        return link[0];\n    };\n    \n    /**\n     * get link from current (or param) file\n     *\n     * @param currentFile - current file by default\n     */\n    this.getCurrentPath = (currentFile) => {\n        const current = currentFile || DOM.getCurrentFile();\n        const element = DOM.getByTag('a', current)[0];\n        const prefix = CloudCmd.PREFIX;\n        const path = element.getAttribute('href')\n            .replace(RegExp('^' + prefix + FS), '');\n        \n        return path;\n    };\n    \n    /**\n     * get name from current (or param) file\n     *\n     * @param currentFile\n     */\n    this.getCurrentName = (currentFile) => {\n        const current = currentFile || DOM.getCurrentFile();\n        \n        if (!current)\n            return '';\n           \n        const link = DOM.getCurrentLink(current);\n        \n        if (!link)\n            return '';\n            \n        const name = link.title;\n        \n        return name;\n    };\n    \n    this.getFilenames = (files) => {\n        if (!files)\n            throw Error('AllFiles could not be empty');\n        \n        const first = files[0] || DOM.getCurrentFile();\n        const name = DOM.getCurrentName(first);\n        \n        const allFiles = [...files];\n        \n        if (name === '..')\n            allFiles.shift();\n        \n        const names = allFiles.map((current) => {\n            return DOM.getCurrentName(current);\n        });\n        \n        return names;\n    };\n    \n    /**\n     * set name from current (or param) file\n     *\n     * @param name\n     * @param current\n     */\n    this.setCurrentName = (name, current) => {\n        const Info = CurrentInfo;\n        const link = Info.link;\n        const PREFIX = CloudCmd.PREFIX;\n        const dir = PREFIX + FS + Info.dirPath;\n        \n        link.title      = name;\n        link.innerHTML  = Entity.encode(name);\n        link.href       = dir + name;\n        \n        current.setAttribute('data-name', 'js-file-' + name);\n        \n        return link;\n    };\n    \n    /**\n     * check storage hash\n     */\n    this.checkStorageHash = (name, callback) => {\n        const parallel = exec.parallel;\n        const loadHash = DOM.loadCurrentHash;\n        const nameHash = name + '-hash';\n        const getStoreHash = exec.with(Storage.get, nameHash);\n        \n        if (typeof name !== 'string')\n            throw Error('name should be a string!');\n        \n        if (typeof callback !== 'function')\n            throw Error('callback should be a function!');\n        \n        parallel([loadHash, getStoreHash], (error, loadHash, storeHash) => {\n            let equal;\n            const isContain = /error/.test(loadHash);\n            \n            if (isContain)\n                error = loadHash;\n            else if (loadHash === storeHash)\n                equal = true;\n            \n            callback(error, equal, loadHash);\n        });\n    };\n    \n    /**\n     * save data to storage\n     *\n     * @param name\n     * @param data\n     * @param hash\n     * @param callback\n     */\n    this.saveDataToStorage = function(name, data, hash, callback) {\n        const allowed = CloudCmd.config('localStorage');\n        const isDir = DOM.isCurrentIsDir();\n        const nameHash = name + '-hash';\n        const nameData = name + '-data';\n        \n        if (!allowed || isDir)\n            return exec(callback);\n        \n        exec.if(hash, () => {\n            Storage.set(nameHash, hash);\n            Storage.set(nameData, data);\n            \n            exec(callback, hash);\n        }, (callback) => {\n            DOM.loadCurrentHash((error, loadHash) => {\n                hash = loadHash;\n                callback();\n            });\n        });\n    };\n    \n    /**\n     * save data to storage\n     *\n     * @param name\n     * @param data\n     * @param callback\n     */\n    this.getDataFromStorage = (name, callback) => {\n        const nameHash = name + '-hash';\n        const nameData = name + '-data';\n        const allowed = CloudCmd.config('localStorage');\n        const isDir = DOM.isCurrentIsDir();\n        \n        if (!allowed || isDir)\n            return exec(callback);\n        \n        exec.parallel([\n            exec.with(Storage.get, nameData),\n            exec.with(Storage.get, nameHash),\n        ], callback);\n    };\n    \n    this.getFM = () => {\n        return DOM.getPanel().parentElement;\n    };\n    \n    this.getPanelPosition = (panel) => {\n        panel = panel || DOM.getPanel();\n        \n        return panel.dataset.name.replace('js-', '');\n    };\n    \n    /** function getting panel active, or passive\n     * @param options = {active: true}\n     */\n    this.getPanel = (options) => {\n        var files, panel, isLeft,\n            dataName    = 'js-',\n            current     = DOM.getCurrentFile();\n        \n        if (!current) {\n            panel       = DOM.getByDataName('js-left');\n        } else {\n            files       = current.parentElement,\n            panel       = files.parentElement,\n            isLeft      = panel.getAttribute('data-name') === 'js-left';\n        }\n            \n        /* if {active : false} getting passive panel */\n        if (options && !options.active) {\n            dataName    += isLeft ? 'right' : 'left';\n            panel       = DOM.getByDataName(dataName);\n        }\n        \n        /* if two panels showed\n         * then always work with passive\n         * panel\n         */\n        if (window.innerWidth < CloudCmd.MIN_ONE_PANEL_WIDTH)\n            panel = DOM.getByDataName('js-left');\n            \n        \n        if (!panel)\n            throw Error('can not find Active Panel!');\n            \n        return panel;\n    };\n    \n    this.getFiles = (element) => {\n        const files = DOM.getByDataName('js-files', element);\n        return files.children || [];\n    };\n    \n    /**\n     * shows panel right or left (or active)\n     */\n    this.showPanel = (active) => {\n        const panel = DOM.getPanel({active: active});\n        \n        if (!panel)\n            return false;\n        \n        DOM.show(panel);\n        \n        return true;\n    };\n    \n    /**\n     * hides panel right or left (or active)\n     */\n    this.hidePanel               = (active) => {\n        var ret     = false,\n            panel   = DOM.getPanel({active: active});\n        \n        if (panel)\n            ret = DOM.hide(panel);\n        \n        return ret;\n    };\n        \n    /**\n     * open window with URL\n     * @param url\n     */\n    this.openWindow              = (url) => {\n        var left        = 140,\n            top         = 187,\n            width       = 1000,\n            height      = 650,\n            \n            options     = 'left='   + left          +\n                ',top='             + top           +\n                ',width='           + width         +\n                ',height='          + height        +\n                ',personalbar=0,toolbar=0'          +\n                ',scrollbars=1,resizable=1',\n            \n            wnd         = window.open(url, 'Cloud Commander Auth', options);\n        \n        if (!wnd)\n            DOM.Dialog.alert(TITLE, 'Please disable your popup blocker and try again.');\n        \n        return wnd;\n    };\n    \n    /**\n     * remove child of element\n     * @param pChild\n     * @param element\n     */\n    this.remove = (child, element) => {\n        const parent = element || document.body;\n        \n        parent.removeChild(child);\n        \n        return DOM;\n    };\n    \n    /**\n     * remove current file from file table\n     * @param current\n     *\n     */\n    this.deleteCurrent = (current) => {\n        var next, prev, currentNew;\n        \n        if (!current)\n            Cmd.getCurrentFile();\n        \n        var parent = current && current.parentElement;\n        var name = Cmd.getCurrentName(current);\n        \n        if (current && name !== '..') {\n            next    = current.nextSibling,\n            prev    = current.previousSibling;\n                \n            if (next)\n                currentNew = next;\n            else if (prev)\n                currentNew = prev;\n            \n            DOM.setCurrentFile(currentNew);\n            \n            parent.removeChild(current);\n        }\n        \n        return currentNew;\n    };\n    \n    /**\n     * remove selected files from file table\n     * @Selected\n     */\n    this.deleteSelected = (selected) => {\n        var i, n, current;\n        \n        if (!selected)\n            selected = DOM.getSelectedFiles();\n        \n        if (selected) {\n            n = selected.length;\n            \n            for (i = 0; i < n; i++) {\n                current = selected[i];\n                DOM.deleteCurrent(current);\n            }\n        }\n        \n        return selected;\n    };\n    \n    /**\n     * rename current file\n     *\n     * @currentFile\n     */\n    this.renameCurrent = (current) => {\n        const Dialog = DOM.Dialog;\n        \n        if (!Cmd.isCurrentFile(current))\n            current = Cmd.getCurrentFile();\n        \n        const from = Cmd.getCurrentName(current);\n        \n        if (from === '..')\n            return Dialog.alert.noFiles(TITLE);\n        \n        const cancel = false;\n        \n        Dialog.prompt(TITLE, 'Rename', from, {cancel}).then((to) => {\n            const isExist = !!DOM.getCurrentByName(to);\n            const dirPath = Cmd.getCurrentDirPath();\n            \n            if (from === to)\n                return;\n            \n            const files = {\n                from : dirPath + from,\n                to : dirPath + to\n            };\n            \n            RESTful.mv(files, (error) => {\n                if (error)\n                    return;\n                \n                DOM.setCurrentName(to, current);\n                Cmd.updateCurrentInfo(current);\n                Storage.remove(dirPath);\n                \n                if (isExist)\n                    CloudCmd.refresh();\n            });\n        });\n    };\n    \n    /**\n     * unified way to scrollIntoViewIfNeeded\n     * (native suporte by webkit only)\n     * @param element\n     * @param pCenter\n     */\n    this.scrollIntoViewIfNeeded  = function(element, center) {\n        var ret = element && element.scrollIntoViewIfNeeded;\n        \n        /* for scroll as small as possible\n         * param should be false\n         */\n        if (arguments.length === 1)\n            center = false;\n        \n        if (ret)\n            element.scrollIntoViewIfNeeded(center);\n        \n        return ret;\n    };\n    \n    /* scroll on one page*/\n    this.scrollByPages           = (element, pPages) => {\n        var ret = element && element.scrollByPages && pPages;\n        \n        if (ret)\n            element.scrollByPages(pPages);\n        \n        return ret;\n    };\n    \n    this.changePanel = () => {\n        let panel = DOM.getPanel();\n        const panelPassive = DOM.getPanel({\n            active: false\n        });\n        \n        let name = DOM.getCurrentName();\n        const filesPassive = DOM.getFiles(panelPassive);\n        \n        let dataName = panel.getAttribute('data-name');\n        \n        TabPanel[dataName] = name;\n         \n        panel = panelPassive;\n        dataName = panel.getAttribute('data-name');\n        \n        name = TabPanel[dataName];\n        \n        let files;\n        let current;\n        \n        if (name) {\n            current = DOM.getCurrentByName(name, panel);\n            \n            if (current)\n                files = current.parentElement;\n        }\n        \n        if (!files || !files.parentElement) {\n            current = DOM.getCurrentByName(name, panel);\n            \n            if (!current)\n                current = filesPassive[0];\n        }\n        \n        DOM.setCurrentFile(current, {\n            history: true\n        });\n        \n        return DOM;\n    };\n    \n    this.getPackerExt = (type) => {\n        if (type === 'zip')\n            return '.zip';\n        \n        return '.tar.gz';\n    };\n    \n    this.goToDirectory = () => {\n        const msg = 'Go to directory:';\n        const path = CurrentInfo.dirPath;\n        const Dialog = DOM.Dialog;\n        const cancel = false;\n        \n        Dialog.prompt(TITLE, msg, path, {cancel}).then((path) => {\n            CloudCmd.loadDir({\n                path: path\n            });\n        });\n    },\n    \n    this.duplicatePanel = () => {\n        const Info = CurrentInfo;\n        const isDir = Info.isDir;\n        const panel = Info.panelPassive;\n        const noCurrent = !Info.isOnePanel;\n        \n        const getPath = (isDir) => {\n            if (isDir)\n                return Info.path;\n            \n            return Info.dirPath;\n        };\n        \n        const path = getPath(isDir);\n        \n        CloudCmd.loadDir({\n            path,\n            panel,\n            noCurrent,\n        });\n    };\n    \n    this.swapPanels = () => {\n        const Info = CurrentInfo;\n        const {panel} = Info;\n        const {files} = Info;\n        const {element} = Info;\n        \n        const panelPassive = Info.panelPassive;\n        \n        const dirPath = DOM.getCurrentDirPath();\n        const dirPathPassive = DOM.getNotCurrentDirPath();\n        \n        let currentIndex = files.indexOf(element);\n        \n        CloudCmd.loadDir({\n            path: dirPath,\n            panel: panelPassive,\n            noCurrent: true\n        });\n        \n        CloudCmd.loadDir({\n            path: dirPathPassive,\n            panel: panel\n        }, () => {\n            const files = Info.files;\n            const length = files.length - 1;\n            \n            if (currentIndex > length)\n                currentIndex = length;\n            \n            const el = files[currentIndex];\n            \n            DOM.setCurrentFile(el);\n        });\n    };\n    \n    this.CurrentInfo = CurrentInfo,\n    \n    this.updateCurrentInfo = (currentFile) => {\n        const info = Cmd.CurrentInfo;\n        const current = currentFile || Cmd.getCurrentFile();\n        const files = current.parentElement;\n        const panel = files.parentElement;\n        \n        const panelPassive = Cmd.getPanel({\n            active: false\n        });\n        \n        const filesPassive = DOM.getFiles(panelPassive);\n        const name = Cmd.getCurrentName(current);\n        \n        info.dir            = Cmd.getCurrentDirName();\n        info.dirPath        = Cmd.getCurrentDirPath();\n        info.parentDirPath  = Cmd.getParentDirPath();\n        info.element        = current;\n        info.ext            = Util.getExt(name);\n        info.files          = [...files.children];\n        info.filesPassive   = [...filesPassive];\n        info.first          = files.firstChild;\n        info.getData        = Cmd.getCurrentData;\n        info.last           = files.lastChild;\n        info.link           = Cmd.getCurrentLink(current);\n        info.mode           = Cmd.getCurrentMode(current);\n        info.name           = name;\n        info.path           = Cmd.getCurrentPath(current);\n        info.panel          = panel;\n        info.panelPassive   = panelPassive;\n        info.size           = Cmd.getCurrentSize(current);\n        info.isDir          = Cmd.isCurrentIsDir();\n        info.isSelected     = Cmd.isSelected(current);\n        info.panelPosition  = Cmd.getPanel().dataset.name.replace('js-', '');\n        info.isOnePanel     =\n            info.panel.getAttribute('data-name') ===\n            info.panelPassive.getAttribute('data-name');\n    };\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./client/dom/index.js\n// module id = 8\n// module chunks = 16\n\n//# sourceURL=file://cloudcmd/client/dom/index.js");

/***/ }),
/* 9 */
/*!******************************!*\
  !*** ./client/dom/events.js ***!
  \******************************/
/*! no static exports found */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst itype = __webpack_require__(/*! itype/legacy */ 4);\n\nmodule.exports = new EventsProto();\n\nfunction EventsProto() {\n    const Events = this;\n    \n    function parseArgs(eventName, element, listener, callback) {\n        let isFunc;\n        \n        const EVENT_NAME = 1;\n        const ELEMENT = 0;\n        const type = itype(eventName);\n        \n        switch(type) {\n        default:\n            if (!/element$/.test(type))\n                throw Error('unknown eventName: ' + type);\n            \n            parseArgs(\n                arguments[EVENT_NAME],\n                arguments[ELEMENT],\n                listener,\n                callback\n            );\n            break;\n        \n        case 'string':\n            isFunc = itype.function(element);\n            \n            if (isFunc) {\n                listener   = element;\n                element    = null;\n            }\n            \n            if (!element)\n                element = window;\n            \n            callback(element, [\n                eventName,\n                listener,\n                false\n            ]);\n            break;\n        \n        case 'array':\n            eventName.forEach((eventName) => {\n                parseArgs(\n                    eventName,\n                    element,\n                    listener,\n                    callback\n                );\n            });\n            break;\n        \n        case 'object':\n            Object.keys(eventName).forEach((name) => {\n                const eventListener = eventName[name];\n                \n                parseArgs(\n                    name,\n                    element,\n                    eventListener,\n                    callback\n                );\n            });\n           \n            break;\n        }\n    }\n    \n    /**\n     * safe add event listener\n     *\n     * @param type\n     * @param element {document by default}\n     * @param listener\n     */\n    this.add = (type, element, listener) => {\n        checkType(type);\n        \n        parseArgs(type, element, listener, function(element, args) {\n            element.addEventListener.apply(element, args);\n        });\n        \n        return Events;\n    };\n    \n    /**\n     * safe add event listener\n     *\n     * @param type\n     * @param listener\n     * @param element {document by default}\n     */\n    this.addOnce = (type, element, listener) => {\n        var once = (event) => {\n            Events.remove(type, element, once);\n            listener(event);\n        };\n        \n        if (!listener) {\n            listener    = element;\n            element     = null;\n        }\n        \n        this.add(type, element, once);\n        \n        return Events;\n    };\n    \n    /**\n     * safe remove event listener\n     *\n     * @param type\n     * @param listener\n     * @param element {document by default}\n     */\n    this.remove = (type, element, listener) => {\n        checkType(type);\n        \n        parseArgs(type, element, listener, (element, args) => {\n            element.removeEventListener.apply(element, args);\n        });\n        \n        return Events;\n    };\n    \n    /**\n     * safe add event keydown listener\n     *\n     * @param listener\n     */\n    this.addKey = function(...argsArr) {\n        const name = 'keydown';\n        const args = [name].concat(argsArr);\n        \n        return this.add(...args);\n    };\n    \n    /**\n     * safe remove event click listener\n     *\n     * @param listener\n     */\n    this.rmKey = function(...argsArr) {\n        const name = 'keydown';\n        const args = [name].concat(argsArr);\n        \n        return this.remove(...args);\n    };\n    \n    /**\n     * safe add event click listener\n     *\n     * @param listener\n     */\n    this.addClick = function(...argsArr) {\n        const name = 'click';\n        const args = [name].concat(argsArr);\n        \n        return this.add(...args);\n    };\n    \n    /**\n     * safe remove event click listener\n     *\n     * @param listener\n     */\n    this.rmClick = function(...argsArr) {\n        const name = 'click';\n        const args = [name].concat(argsArr);\n        \n        return this.remove(...args);\n    };\n    \n    this.addContextMenu = function(...argsArr) {\n        const name = 'contextmenu';\n        const args = [name].concat(argsArr);\n        \n        return this.add(...args);\n    };\n    \n    /**\n     * safe add event click listener\n     *\n     * @param listener\n     */\n    this.addError = function(...argsArr) {\n        const name = 'error';\n        const args = [name].concat(argsArr);\n        \n        return this.add(...args);\n    };\n    \n    /**\n     * safe add load click listener\n     *\n     * @param listener\n     */\n    this.addLoad = function(...argsArr) {\n        const name = 'load';\n        const args = [name].concat(argsArr);\n        \n        return this.add(...args);\n    };\n    \n    /**\n     * crossbrowser create event\n     *\n     * @param eventName\n     * @param keyCode - not necessarily\n     */\n    this.create = function(eventName, keyCode) {\n        const event = document.createEvent('Event');\n        \n        event.initEvent(eventName, true, true);\n        \n        if (keyCode)\n            event.keyCode = keyCode;\n        \n        event.isDefaultPrevented = function() {\n            return this.defaultPrevented;\n        };\n        \n        return event;\n    };\n    \n    /**\n     * create keydown event\n     *\n     * @param keyCode\n     */\n    this.createKey = function(keyCode) {\n        return this.create('keydown', keyCode);\n    };\n    \n    /**\n     * create click event\n     */\n    this.createClick = function() {\n        return this.create('click');\n    };\n    \n    /**\n     * create click event\n     */\n    this.createDblClick = function() {\n        return this.create('dblclick');\n    };\n    \n    /**\n     * dispatch event\n     *\n     * @param event\n     */\n    this.dispatch = (event, element) => {\n        let customEvent;\n        const isStr = itype.string(event);\n        \n        if (isStr)\n            customEvent = Events.create(event);\n        else\n            customEvent = event;\n        \n        return (element || window).dispatchEvent(customEvent);\n    };\n    \n    /**\n     * dispatch keydown event\n     *\n     * @param keyCode\n     * @param element\n     */\n    this.dispatchKey = function(keyCode, element) {\n        const event = this.createKey(keyCode);\n        return this.dispatch(event, element);\n    };\n    \n    /**\n     * dispatch click event\n     *\n     * @param element\n     */\n    this.dispatchClick = function(element) {\n        const event = this.createClick();\n        return this.dispatch(event, element);\n    };\n    \n    /**\n     * dispatch dblclick event\n     *\n     * @param element\n     */\n    this.dispatchDblClick = function(element) {\n        const event = this.createDblClick();\n        \n        return this.dispatch(event, element);\n    };\n    \n    function checkType(type) {\n        if (!type)\n            throw Error('type could not be empty!');\n    }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./client/dom/events.js\n// module id = 9\n// module chunks = 16\n\n//# sourceURL=file://cloudcmd/client/dom/events.js");

/***/ }),
/* 10 */
/*!*****************************!*\
  !*** ./client/dom/files.js ***!
  \*****************************/
/*! no static exports found */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* global CloudCmd */\n\n\n\nconst itype = __webpack_require__(/*! itype/legacy */ 4);\nconst currify = __webpack_require__(/*! currify/legacy */ 6);\nconst exec = __webpack_require__(/*! execon */ 0);\n\nconst Storage = __webpack_require__(/*! ./storage */ 14);\nconst load = __webpack_require__(/*! ./load */ 2);\nconst RESTful = __webpack_require__(/*! ./rest */ 13);\n\nconst Promises = {};\nconst FILES_JSON = 'config|modules';\nconst FILES_HTML = 'file|path|link|pathLink|media';\nconst FILES_HTML_ROOT = 'view/media-tmpl|config-tmpl|upload';\nconst DIR_HTML = '/tmpl/';\nconst DIR_HTML_FS = DIR_HTML + 'fs/';\nconst DIR_JSON = '/json/';\nconst timeout = getTimeoutOnce(2000);\n\nconst get = currify(getFile);\nconst unaryMap = (array, fn) => array.map((a) => fn(a));\n\nmodule.exports.get = get;\n\nfunction getFile(name, callback) {\n    const type = itype(name);\n    let array;\n    \n    check(name, callback);\n    \n    switch(type) {\n    case 'string':\n        getModule(name, callback);\n        break;\n    \n    case 'array':\n        array = unaryMap(name, get);\n        \n        exec.parallel(array, callback);\n        break;\n    }\n}\n\nfunction check(name, callback) {\n    if (!name)\n        throw Error('name could not be empty!');\n    \n    if (typeof callback !== 'function')\n        throw Error('callback should be a function');\n}\n\nfunction getModule(name, callback) {\n    let path;\n    \n    const regExpHTML = new RegExp(FILES_HTML + '|' + FILES_HTML_ROOT);\n    const regExpJSON = new RegExp(FILES_JSON);\n    \n    const isHTML = regExpHTML.test(name);\n    const isJSON = regExpJSON.test(name);\n    \n    if (!isHTML && !isJSON) {\n        showError(name);\n    } else if (name === 'config') {\n        getConfig(callback);\n    } else {\n        path = getPath(name, isHTML, isJSON);\n        \n        getSystemFile(path, callback);\n    }\n    \n}\n\nfunction getPath(name, isHTML, isJSON) {\n    let path;\n    const regExp = new RegExp(FILES_HTML_ROOT);\n    const isRoot = regExp.test(name);\n    \n    if (isHTML) {\n        if (isRoot)\n            path = DIR_HTML + name.replace('-tmpl', '');\n        else\n            path = DIR_HTML_FS  + name;\n        \n        path += '.hbs';\n    } else if (isJSON) {\n        path = DIR_JSON  + name + '.json';\n    }\n    \n    return path;\n}\n\nfunction showError(name) {\n    const str = 'Wrong file name: ' + name;\n    const error = new Error(str);\n    \n    throw(error);\n}\n\nfunction getSystemFile(file, callback) {\n    const prefix = CloudCmd.PREFIX;\n    \n    if (!Promises[file])\n        Promises[file] = new Promise((success, error) => {\n            const url = prefix + file;\n            \n            load.ajax({\n                url,\n                success,\n                error\n            });\n        });\n    \n    Promises[file].then((data) => {\n        callback(null, data);\n    }, (error) => {\n        Promises[file] = null;\n        callback(error);\n    });\n}\n\nfunction getConfig(callback) {\n    let is;\n    \n    if (!Promises.config)\n        Promises.config = new Promise((resolve, reject) => {\n            is = true;\n            RESTful.Config.read((error, data) => {\n                if (error)\n                    return reject(error);\n                \n                resolve(data);\n            });\n        });\n    \n    Promises.config.then(function(data) {\n        is = false;\n        Storage.setAllowed(data.localStorage);\n        \n        callback(null, data);\n        \n        timeout(() => {\n            if (!is)\n                Promises.config = null;\n        });\n    }, function() {\n        if (!is)\n            Promises.config = null;\n    });\n}\n\nfunction getTimeoutOnce(time) {\n    let is;\n    \n    return (callback) => {\n        if (is)\n            return;\n        \n        is = true;\n        \n        setTimeout(() => {\n            is = false;\n            callback();\n        }, time);\n    };\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./client/dom/files.js\n// module id = 10\n// module chunks = 16\n\n//# sourceURL=file://cloudcmd/client/dom/files.js");

/***/ }),
/* 11 */
/*!*****************************************!*\
  !*** ./node_modules/rendy/lib/rendy.js ***!
  \*****************************************/
/*! no static exports found */
/*! all exports used */
/***/ (function(module, exports) {

eval("(function(global) {\n    'use strict';\n    \n    if (typeof module === 'object' && module.exports)\n        module.exports = rendy;\n    else\n        global.rendy = rendy;\n    \n    /**\n     * render template with data\n     *\n     * @param templ\n     * @param data\n     */\n    function rendy(templ, data) {\n        var result  = templ;\n        \n        check(templ, data);\n        \n        Object\n            .keys(data)\n            .forEach(function(param) {\n                var name    = '{{ ' + param + ' }}',\n                    str     = data[param];\n                \n                while(~result.indexOf(name))\n                    result = result.replace(name, str);\n            });\n        \n        if (~result.indexOf('{{'))\n            result = result.replace(/{{.*?}}/g, '');\n        \n        return result;\n    }\n    \n    function check(templ, data) {\n        if (typeof templ !== 'string')\n            throw(Error('template should be string!'));\n        \n        if (typeof data !== 'object')\n            throw(Error('data should be object!'));\n    }\n})(this);\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/rendy/lib/rendy.js\n// module id = 11\n// module chunks = 16\n\n//# sourceURL=file://cloudcmd/node_modules/rendy/lib/rendy.js");

/***/ }),
/* 12 */
/*!************************************************!*\
  !*** ./node_modules/fullstore/legacy/index.js ***!
  \************************************************/
/*! no static exports found */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

eval("module.exports = __webpack_require__(/*! ./lib/fullstore */ 27);\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/fullstore/legacy/index.js\n// module id = 12\n// module chunks = 16\n\n//# sourceURL=file://cloudcmd/node_modules/fullstore/legacy/index.js");

/***/ }),
/* 13 */
/*!****************************!*\
  !*** ./client/dom/rest.js ***!
  \****************************/
/*! no static exports found */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\n/* global CloudCmd, DOM */\n\nconst itype = __webpack_require__(/*! itype/legacy */ 4);\n\nconst {FS} = __webpack_require__(/*! ../../common/cloudfunc */ 3);\n\nmodule.exports = new RESTful();\n\nconst Images = __webpack_require__(/*! ./images */ 1);\nconst load = __webpack_require__(/*! ./load */ 2);\n\nfunction RESTful() {\n    this.delete = (url, data, callback) => {\n        const isFunc = itype.function(data);\n        \n        if (!callback && isFunc) {\n            callback = data;\n            data = null;\n        }\n        \n        sendRequest({\n            method      : 'DELETE',\n            url         : FS + url,\n            data,\n            callback,\n            imgPosition : { top: !!data }\n        });\n    };\n    \n    this.patch = (url, data, callback) => {\n        const isFunc = itype.function(data);\n        \n        if (!callback && isFunc) {\n            callback = data;\n            data = null;\n        }\n        \n        const imgPosition = {\n            top: true\n        };\n        \n        sendRequest({\n            method: 'PATCH',\n            url: FS + url,\n            data,\n            callback,\n            imgPosition,\n        });\n    };\n    \n    this.write = (url, data, callback) => {\n        const isFunc = itype.function(data);\n        \n        if (!callback && isFunc) {\n            callback    = data;\n            data        = null;\n        }\n        \n        sendRequest({\n            method: 'PUT',\n            url: FS + url,\n            data,\n            callback,\n            imgPosition : { top: true }\n        });\n    };\n    \n    this.read = (url, dataType, callback) => {\n        const isQuery = /\\?/.test(url);\n        const isBeautify = /\\?beautify$/.test(url);\n        const isMinify = /\\?minify$/.test(url);\n        const notLog = !isQuery || isBeautify || isMinify;\n        const isFunc = itype.function(dataType);\n        \n        if (!callback && isFunc) {\n            callback = dataType;\n            dataType = 'text';\n        }\n        \n        sendRequest({\n            method: 'GET',\n            url: FS + url,\n            callback,\n            notLog,\n            dataType,\n        });\n    };\n    \n    this.cp = (data, callback) => {\n        sendRequest({\n            method: 'PUT',\n            url: '/cp',\n            data,\n            callback,\n            imgPosition : { top: true }\n        });\n    };\n    \n    this.pack = (data, callback) => {\n        sendRequest({\n            method      : 'PUT',\n            url         : '/pack',\n            data,\n            callback,\n        });\n    };\n    \n    this.extract = function(data, callback) {\n        sendRequest({\n            method      : 'PUT',\n            url         : '/extract',\n            data        : data,\n            callback    : callback\n        });\n    };\n    \n    this.mv = function(data, callback) {\n        sendRequest({\n            method      : 'PUT',\n            url         : '/mv',\n            data        : data,\n            callback    : callback,\n            imgPosition : { top: true }\n        });\n    };\n    \n    this.Config = {\n        read:   function(callback) {\n            sendRequest({\n                method      : 'GET',\n                url         : '/config',\n                callback    : callback,\n                imgPosition : { top: true },\n                notLog      : true\n            });\n        },\n        \n        write:  function(data, callback) {\n            sendRequest({\n                method      : 'PATCH',\n                url         : '/config',\n                data        : data,\n                callback    : callback,\n                imgPosition : { top: true }\n            });\n        }\n    };\n    \n    this.Markdown   = {\n        read    : function(url, callback) {\n            sendRequest({\n                method      : 'GET',\n                url         : '/markdown' + url,\n                callback    : callback,\n                imgPosition : { top: true },\n                notLog      : true\n            });\n        },\n        \n        render  : function(data, callback) {\n            sendRequest({\n                method      : 'PUT',\n                url         : '/markdown',\n                data        : data,\n                callback    : callback,\n                imgPosition : { top: true },\n                notLog      : true\n            });\n        }\n    };\n    \n    function sendRequest(params) {\n        var p           = params,\n            prefixUrl   = CloudCmd.PREFIX_URL;\n        \n        p.url   = prefixUrl + p.url;\n        p.url   = encodeURI(p.url);\n        \n        /*\n         * if we send ajax request -\n         * no need in hash so we escape #\n         */\n        p.url   = p.url.replace('#', '%23');\n        \n        load.ajax({\n            method      : p.method,\n            url         : p.url,\n            data        : p.data,\n            dataType    : p.dataType,\n            error       : (jqXHR) => {\n                const response = jqXHR.responseText;\n                const statusText = jqXHR.statusText;\n                const status = jqXHR.status;\n                const text = status === 404 ? response : statusText;\n                \n                Images.show.error(text);\n                setTimeout(() => {\n                    DOM.Dialog.alert(CloudCmd.TITLE, text);\n                }, 100);\n                \n                p.callback(Error(text));\n            },\n            success: (data) => {\n                Images.hide();\n                \n                if (!p.notLog)\n                    CloudCmd.log(data);\n                \n                p.callback(null, data);\n            }\n        });\n    }\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./client/dom/rest.js\n// module id = 13\n// module chunks = 16\n\n//# sourceURL=file://cloudcmd/client/dom/rest.js");

/***/ }),
/* 14 */
/*!*******************************!*\
  !*** ./client/dom/storage.js ***!
  \*******************************/
/*! no static exports found */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst itype = __webpack_require__(/*! itype/legacy */ 4);\nconst jonny = __webpack_require__(/*! jonny */ 7);\nconst exec = __webpack_require__(/*! execon */ 0);\n\n/* приватный переключатель возможности работы с кэшем */\nlet Allowed;\n\n/**\n * allow Storage usage\n */\nmodule.exports.setAllowed = (isAllowed) => {\n    Allowed = isAllowed;\n};\n\n/** remove element */\nmodule.exports.remove = (item, callback) => {\n    if (Allowed)\n        localStorage.removeItem(item);\n    \n    exec(callback, null, Allowed);\n    \n    return module.exports;\n};\n\nmodule.exports.removeMatch = (string, callback) => {\n    const reg = RegExp('^' + string + '.*$');\n    const test = (a) => reg.test(a);\n    const remove = (a) => localStorage.removeItem(a);\n    \n    Object.keys(localStorage)\n        .filter(test)\n        .forEach(remove);\n    \n    exec(callback);\n    \n    return module.exports;\n};\n\n/** если доступен localStorage и\n * в нём есть нужная нам директория -\n * записываем данные в него\n */\nmodule.exports.set = (name, data, callback) => {\n    let str, error;\n    \n    if (itype.object(data))\n        str = jonny.stringify(data);\n    \n    if (Allowed && name)\n        error = exec.try(() => {\n            localStorage.setItem(name, str || data);\n        });\n    \n    exec(callback, error);\n    \n    return module.exports;\n},\n\n/** Если доступен Storage принимаем из него данные*/\nmodule.exports.get = (name, callback) => {\n    let ret;\n    \n    if (Allowed)\n        ret = localStorage.getItem(name);\n    \n    exec(callback, null, ret);\n    \n    return module.exports;\n},\n\n/** функция чистит весь кэш для всех каталогов*/\nmodule.exports.clear = (callback) => {\n    const ret = Allowed;\n    \n    if (ret)\n        localStorage.clear();\n    \n    exec(callback, null, ret);\n    \n    return module.exports;\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./client/dom/storage.js\n// module id = 14\n// module chunks = 16\n\n//# sourceURL=file://cloudcmd/client/dom/storage.js");

/***/ }),
/* 15 */
/*!**********************************************!*\
  !*** ./node_modules/emitify/legacy/index.js ***!
  \**********************************************/
/*! no static exports found */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

eval("module.exports = __webpack_require__(/*! ./lib/emitify */ 24);\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/emitify/legacy/index.js\n// module id = 15\n// module chunks = 16\n\n//# sourceURL=file://cloudcmd/node_modules/emitify/legacy/index.js");

/***/ }),
/* 16 */
/*!***********************************!*\
  !*** (webpack)/buildin/global.js ***!
  \***********************************/
/*! no static exports found */
/*! all exports used */
/***/ (function(module, exports) {

eval("var g;\r\n\r\n// This works in non-strict mode\r\ng = (function() {\r\n\treturn this;\r\n})();\r\n\r\ntry {\r\n\t// This works if eval is allowed (see CSP)\r\n\tg = g || Function(\"return this\")() || (1,eval)(\"this\");\r\n} catch(e) {\r\n\t// This works if the window reference is available\r\n\tif(typeof window === \"object\")\r\n\t\tg = window;\r\n}\r\n\r\n// g can still be undefined, but nothing to do about it...\r\n// We return undefined, instead of nothing here, so it's\r\n// easier to handle this case. if(!global) { ...}\r\n\r\nmodule.exports = g;\r\n\n\n//////////////////\n// WEBPACK FOOTER\n// (webpack)/buildin/global.js\n// module id = 16\n// module chunks = 16\n\n//# sourceURL=file://cloudcmd/node_modules/webpack/buildin/global.js");

/***/ }),
/* 17 */
/*!******************************!*\
  !*** ./client/dom/buffer.js ***!
  \******************************/
/*! no static exports found */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\n/* global CloudCmd */\n\nconst jonny = __webpack_require__(/*! jonny */ 7);\nconst exec = __webpack_require__(/*! execon */ 0);\n\nconst Storage = __webpack_require__(/*! ./storage */ 14);\nconst DOM = __webpack_require__(/*! ./ */ 8);\n\nmodule.exports = new BufferProto();\n\nfunction BufferProto() {\n    const Info = DOM.CurrentInfo;\n    const CLASS = 'cut-file';\n    const COPY = 'copy';\n    const CUT = 'cut';\n    const TITLE = 'Buffer';\n    \n    const Buffer  = {\n        cut     : callIfEnabled.bind(null, cut),\n        copy    : callIfEnabled.bind(null, copy),\n        clear   : callIfEnabled.bind(null, clear),\n        paste   : callIfEnabled.bind(null, paste)\n    };\n    \n    function showMessage(msg) {\n        DOM.Dialog.alert(TITLE, msg);\n    }\n    \n    function getNames() {\n        const files = DOM.getActiveFiles();\n        const names = DOM.getFilenames(files);\n        \n        return names;\n    }\n    \n    function addCutClass() {\n        const files = DOM.getActiveFiles();\n        \n        files.forEach((element) => {\n            element.classList.add(CLASS);\n        });\n    }\n    \n    function rmCutClass() {\n        const files = DOM.getByClassAll(CLASS);\n        \n        [...files].forEach((element) => {\n            element.classList.remove(CLASS);\n        });\n    }\n    \n    function callIfEnabled(callback) {\n        const is = CloudCmd.config('buffer');\n        \n        if (is)\n            return callback();\n        \n        showMessage('Buffer disabled in config!');\n    }\n    \n    function copy() {\n        const names = getNames();\n        const from = Info.dirPath;\n        \n        clear();\n        \n        if (!names.length)\n            return;\n        \n        Storage.remove(CUT)\n            .set(COPY, {\n                from,\n                names,\n            });\n    }\n    \n    function cut() {\n        const names = getNames();\n        const from = Info.dirPath;\n        \n        clear();\n        \n        if (!names.length)\n            return;\n        \n        addCutClass();\n        \n        Storage\n            .set(CUT, {\n                from,\n                names,\n            });\n    }\n    \n    function clear() {\n        Storage.remove(COPY)\n            .remove(CUT);\n        \n        rmCutClass();\n    }\n    \n    function paste() {\n        const copy = Storage.get.bind(Storage, COPY);\n        const cut = Storage.get.bind(Storage, CUT);\n        \n        exec.parallel([copy, cut], function(error, cp, ct) {\n            const opStr = cp ? 'copy' : 'move';\n            const opData = cp || ct;\n            const Operation = CloudCmd.Operation;\n            const msg = 'Path is same!';\n            const path = Info.dirPath;\n            \n            if (!error && !cp && !ct)\n                error = 'Buffer is empty!';\n           \n            if (error)\n                return showMessage(error);\n                \n            const data = jonny.parse(opData);\n            data.to = path;\n            \n            if (data.from === path)\n                return showMessage(msg);\n            \n            Operation.show(opStr, data);\n            clear();\n        });\n    }\n    \n    return Buffer;\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./client/dom/buffer.js\n// module id = 17\n// module chunks = 16\n\n//# sourceURL=file://cloudcmd/client/dom/buffer.js");

/***/ }),
/* 18 */
/*!************************************!*\
  !*** ./client/dom/upload-files.js ***!
  \************************************/
/*! no static exports found */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\n/* global CloudCmd */\n\nconst {eachSeries} = __webpack_require__(/*! execon */ 0);\nconst wraptile = __webpack_require__(/*! wraptile/legacy */ 40);\n\nconst DOM = __webpack_require__(/*! . */ 8);\nconst load = __webpack_require__(/*! ./load */ 2);\nconst Images = __webpack_require__(/*! ./images */ 1);\n\nconst {FS} = __webpack_require__(/*! ../../common/cloudfunc */ 3);\n\nconst onEnd = wraptile(_onEnd);\nconst loadFile = wraptile(_loadFile);\n\nconst {\n    getCurrentDirPath: getPathWhenRootEmpty\n} = DOM;\n\nmodule.exports = (dir, files) => {\n    if (!files) {\n        files = dir;\n        dir = getPathWhenRootEmpty();\n    }\n    \n    const n = files.length;\n    \n    if (!n)\n        return;\n    \n    const array = [...files];\n    const {name} = files[0];\n    \n    eachSeries(array, loadFile(dir, n), onEnd(name));\n};\n\nfunction _onEnd(currentName) {\n    CloudCmd.refresh({\n        currentName\n    });\n}\n\nfunction _loadFile(dir, n, file, callback) {\n    let i = 0;\n    \n    const name = file.name;\n    const path = dir + name;\n    const {PREFIX_URL} = CloudCmd;\n    const api = PREFIX_URL + FS;\n    \n    const percent = (i, n, per = 100) => {\n        return Math.round(i * per / n);\n    };\n    \n    const step = (n) => 100 / n;\n    \n    ++i;\n    \n    load.put(api + path, file)\n        .on('end', callback)\n        .on('progress', (count) => {\n            const max = step(n);\n            const value = (i - 1) * max + percent(count, 100, max);\n            \n            Images.show.load('top');\n            Images.setProgress(Math.round(value));\n        });\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./client/dom/upload-files.js\n// module id = 18\n// module chunks = 16\n\n//# sourceURL=file://cloudcmd/client/dom/upload-files.js");

/***/ }),
/* 19 */
/*!***************************!*\
  !*** ./client/key/key.js ***!
  \***************************/
/*! no static exports found */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nmodule.exports = {\n    BACKSPACE   : 8,\n    TAB         : 9,\n    ENTER       : 13,\n    ESC         : 27,\n    \n    SPACE       : 32,\n    PAGE_UP     : 33,\n    PAGE_DOWN   : 34,\n    END         : 35,\n    HOME        : 36,\n    \n    LEFT        : 37,\n    UP          : 38,\n    RIGHT       : 39,\n    DOWN        : 40,\n    \n    INSERT      : 45,\n    DELETE      : 46,\n    \n    ZERO        : 48,\n    \n    SEMICOLON   : 52,\n    \n    COLON       : 54,\n    \n    A           : 65,\n    \n    C           : 67,\n    D           : 68,\n    \n    G           : 71,\n    \n    J           : 74,\n    K           : 75,\n    \n    M           : 77,\n    \n    O           : 79,\n    Q           : 81,\n    R           : 82,\n    S           : 83,\n    T           : 84,\n    U           : 85,\n    \n    V           : 86,\n    \n    X           : 88,\n    \n    Z           : 90,\n    \n    INSERT_MAC  : 96,\n    \n    ASTERISK    : 106,\n    PLUS        : 107,\n    MINUS       : 109,\n    \n    F1          : 112,\n    F2          : 113,\n    F3          : 114,\n    F4          : 115,\n    F5          : 116,\n    F6          : 117,\n    F7          : 118,\n    F8          : 119,\n    F9          : 120,\n    F10         : 121,\n    \n    EQUAL       : 187,\n    HYPHEN      : 189,\n    DOT         : 190,\n    SLASH       : 191,\n    TRA         : 192, /* Typewritten Reverse Apostrophe (`) */\n    BACKSLASH   : 220,\n    \n    BRACKET_CLOSE: 221\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./client/key/key.js\n// module id = 19\n// module chunks = 16\n\n//# sourceURL=file://cloudcmd/client/key/key.js");

/***/ }),
/* 20 */
/*!*****************************************!*\
  !*** ./node_modules/squad/lib/squad.js ***!
  \*****************************************/
/*! no static exports found */
/*! all exports used */
/***/ (function(module, exports) {

eval("(function(global) {\n    'use strict';\n    \n    if (typeof module !== 'undefined' && module.exports)\n        module.exports  = squad;\n    else\n        global.squad    = squad;\n    \n    function squad() {\n        var funcs = [].slice.call(arguments);\n                \n        check('function', funcs);\n        \n        return function() {\n            return funcs\n                .reduceRight(apply, arguments)\n                .pop();\n        };\n    }\n    \n    function apply(value, fn) {\n        return [fn.apply(null, value)];\n    }\n    \n    function check(type, array) {\n        var wrongType   = partial(wrong, type),\n            notType     = partial(notEqual, type);\n        \n        if (!array.length)\n            wrongType(type);\n        else\n            array\n                .map(getType)\n                .filter(notType)\n                .forEach(wrongType);\n    }\n    \n    function partial(fn, value) {\n        return fn.bind(null, value);\n    }\n    \n    function getType(item) {\n        return typeof item;\n    }\n    \n    function notEqual(a, b) {\n        return a !== b;\n    }\n    \n    function wrong(type) {\n        throw Error('fn should be ' + type + '!');\n    }\n    \n})(this);\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/squad/lib/squad.js\n// module id = 20\n// module chunks = 16\n\n//# sourceURL=file://cloudcmd/node_modules/squad/lib/squad.js");

/***/ }),
/* 21 */
/*!****************************!*\
  !*** ./client/cloudcmd.js ***!
  \****************************/
/*! no static exports found */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\n__webpack_require__(/*! ../css/main.css */ 22);\n__webpack_require__(/*! ../css/nojs.css */ 23);\n\n// prevent additional loading of exec by spero, remedy, ishtar, salam, omnes\nwindow.exec = __webpack_require__(/*! execon */ 0);\n\n// prevent additional loading of emitify\nwindow.Emitify = __webpack_require__(/*! emitify/legacy */ 15);\n\nwindow.CloudCmd = (config) => {\n    window.Promise = window.Promise || __webpack_require__(/*! es6-promise */ 25);\n    window.Util = __webpack_require__(/*! ../common/util */ 5);\n    window.CloudFunc = __webpack_require__(/*! ../common/cloudfunc */ 3);\n    \n    const DOM = __webpack_require__(/*! ./dom */ 8);\n    \n    window.DOM = DOM;\n    window.CloudCmd = __webpack_require__(/*! ./client */ 34);\n    \n    const Dialog = __webpack_require__(/*! ./dom/dialog */ 36);\n    \n    const prefix = getPrefix(config.prefix);\n    const {htmlDialogs} = config;\n    \n    DOM.Dialog = Dialog(prefix, {\n        htmlDialogs\n    });\n    \n    __webpack_require__(/*! ./listeners */ 37);\n    __webpack_require__(/*! ./key */ 42);\n    __webpack_require__(/*! ./sort */ 49);\n    \n    window.CloudCmd.init(prefix, config);\n};\n\nfunction getPrefix(prefix) {\n    if (!prefix)\n        return '';\n   \n    if (!prefix.indexOf('/'))\n        return prefix;\n    \n    return '/' + prefix;\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./client/cloudcmd.js\n// module id = 21\n// module chunks = 16\n\n//# sourceURL=file://cloudcmd/client/cloudcmd.js");

/***/ }),
/* 22 */
/*!**********************!*\
  !*** ./css/main.css ***!
  \**********************/
/*! no static exports found */
/*! all exports used */
/***/ (function(module, exports) {

eval("// removed by extract-text-webpack-plugin\n\n//////////////////\n// WEBPACK FOOTER\n// ./css/main.css\n// module id = 22\n// module chunks = 16\n\n//# sourceURL=file://cloudcmd/css/main.css");

/***/ }),
/* 23 */
/*!**********************!*\
  !*** ./css/nojs.css ***!
  \**********************/
/*! no static exports found */
/*! all exports used */
/***/ (function(module, exports) {

eval("// removed by extract-text-webpack-plugin\n\n//////////////////\n// WEBPACK FOOTER\n// ./css/nojs.css\n// module id = 23\n// module chunks = 16\n\n//# sourceURL=file://cloudcmd/css/nojs.css");

/***/ }),
/* 24 */
/*!****************************************************!*\
  !*** ./node_modules/emitify/legacy/lib/emitify.js ***!
  \****************************************************/
/*! no static exports found */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nmodule.exports = Emitify;\n\nfunction Emitify() {\n    if (!(this instanceof Emitify)) return new Emitify();\n\n    this._all = {};\n}\n\nEmitify.prototype.on = function (event, callback) {\n    var funcs = this._all[event];\n\n    check(event, callback);\n\n    if (funcs) funcs.push(callback);else this._all[event] = [callback];\n\n    return this;\n};\n\nEmitify.prototype.addListener = Emitify.prototype.on;\n\nEmitify.prototype.once = function (event, callback) {\n    var self = this;\n\n    check(event, callback);\n\n    self.on(event, function fn() {\n        callback.apply(null, arguments);\n        self.off(event, fn);\n    });\n\n    return this;\n};\n\nEmitify.prototype.off = function (event, callback) {\n    var events = this._all[event] || [];\n    var index = events.indexOf(callback);\n\n    check(event, callback);\n\n    while (~index) {\n        events.splice(index, 1);\n        index = events.indexOf(callback);\n    }\n\n    return this;\n};\n\nEmitify.prototype.removeListener = Emitify.prototype.off;\n\nEmitify.prototype.emit = function (event) {\n    var args = [].slice.call(arguments, 1);\n    var funcs = this._all[event];\n\n    checkEvent(event);\n\n    if (!funcs && event === 'error') throw args[0];\n\n    if (!funcs) return this;\n\n    funcs.forEach(function (fn) {\n        fn.apply(null, args);\n    });\n\n    return this;\n};\n\nEmitify.prototype.removeAllListeners = function (event) {\n    checkEvent(event);\n\n    this._all[event] = [];\n\n    return this;\n};\n\nfunction checkEvent(event) {\n    if (typeof event !== 'string') throw Error('event should be string!');\n}\n\nfunction checkFn(callback) {\n    if (typeof callback !== 'function') throw Error('callback should be function!');\n}\n\nfunction check(event, callback) {\n    checkEvent(event);\n    checkFn(callback);\n}\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/emitify/legacy/lib/emitify.js\n// module id = 24\n// module chunks = 16\n\n//# sourceURL=file://cloudcmd/node_modules/emitify/legacy/lib/emitify.js");

/***/ }),
/* 25 */
/*!******************************!*\
  !*** external "es6-promise" ***!
  \******************************/
/*! no static exports found */
/*! all exports used */
/***/ (function(module, exports) {

eval("module.exports = es6-promise;\n\n//////////////////\n// WEBPACK FOOTER\n// external \"es6-promise\"\n// module id = 25\n// module chunks = 16\n\n//# sourceURL=file://cloudcmd/external_%22es6-promise%22");

/***/ }),
/* 26 */
/*!****************************************************!*\
  !*** ./node_modules/currify/legacy/lib/currify.js ***!
  \****************************************************/
/*! no static exports found */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar f = function f(fn) {\n    return [\n    /*eslint no-unused-vars: 0*/\n    function (a) {\n        return fn.apply(undefined, arguments);\n    }, function (a, b) {\n        return fn.apply(undefined, arguments);\n    }, function (a, b, c) {\n        return fn.apply(undefined, arguments);\n    }, function (a, b, c, d) {\n        return fn.apply(undefined, arguments);\n    }, function (a, b, c, d, e) {\n        return fn.apply(undefined, arguments);\n    }];\n};\n\nmodule.exports = function currify(fn) {\n    for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n    }\n\n    check(fn);\n\n    if (args.length >= fn.length) return fn.apply(undefined, args);\n\n    var again = function again() {\n        return currify.apply(undefined, [fn].concat(args, Array.prototype.slice.call(arguments)));\n    };\n\n    var count = fn.length - args.length - 1;\n    var func = f(again)[count];\n\n    return func || again;\n};\n\nfunction check(fn) {\n    if (typeof fn !== 'function') throw Error('fn should be function!');\n}\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/currify/legacy/lib/currify.js\n// module id = 26\n// module chunks = 16\n\n//# sourceURL=file://cloudcmd/node_modules/currify/legacy/lib/currify.js");

/***/ }),
/* 27 */
/*!********************************************************!*\
  !*** ./node_modules/fullstore/legacy/lib/fullstore.js ***!
  \********************************************************/
/*! no static exports found */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nmodule.exports = function (value) {\n    var data = {\n        value: value\n    };\n\n    return function (value) {\n        if (!arguments.length) return data.value;\n\n        data.value = value;\n\n        return value;\n    };\n};\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/fullstore/legacy/lib/fullstore.js\n// module id = 27\n// module chunks = 16\n\n//# sourceURL=file://cloudcmd/node_modules/fullstore/legacy/lib/fullstore.js");

/***/ }),
/* 28 */
/*!**************************!*\
  !*** ./common/entity.js ***!
  \**************************/
/*! no static exports found */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst Entities = {\n    '&nbsp;': ' ',\n    '&lt;': '<',\n    '&gt;': '>',\n};\n\nconst keys = Object.keys(Entities);\n\nmodule.exports.encode = (str) => {\n    keys.forEach((code) => {\n        const char = Entities[code];\n        const reg = RegExp(char, 'g');\n        \n        str = str.replace(reg, code);\n    });\n    \n    return str;\n};\n\nmodule.exports.decode = (str) => {\n    keys.forEach((code) => {\n        const char = Entities[code];\n        const reg = RegExp(code, 'g');\n        \n        str = str.replace(reg, char);\n    });\n    \n    return str;\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./common/entity.js\n// module id = 28\n// module chunks = 16\n\n//# sourceURL=file://cloudcmd/common/entity.js");

/***/ }),
/* 29 */
/*!************************************************!*\
  !*** ./node_modules/itype/legacy/lib/itype.js ***!
  \************************************************/
/*! no static exports found */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nmodule.exports = new TypeProto();\n\nfunction TypeProto() {\n    /**\n     * get type of variable\n     *\n     * @param variable\n     */\n    function type(variable) {\n        var regExp = /\\s([a-zA-Z]+)/;\n        var str = {}.toString.call(variable);\n        var typeBig = str.match(regExp)[1];\n        var result = typeBig.toLowerCase();\n        \n        return result;\n    }\n    \n    /**\n     * functions check is variable is type of name\n     *\n     * @param variable\n     */\n    function typeOf(name, variable) {\n        return type(variable) === name;\n    }\n    \n    function typeOfSimple(name, variable) {\n        return typeof variable === name;\n    }\n    \n    ['arrayBuffer', 'file', 'array', 'object']\n        .forEach(function (name) {\n            type[name] = typeOf.bind(null, name);\n        });\n    \n    ['null', 'string', 'undefined', 'boolean', 'number', 'function']\n        .forEach(function (name) {\n            type[name] = typeOfSimple.bind(null, name);\n        });\n    \n    return type;\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/itype/legacy/lib/itype.js\n// module id = 29\n// module chunks = 16\n\n//# sourceURL=file://cloudcmd/node_modules/itype/legacy/lib/itype.js");

/***/ }),
/* 30 */
/*!********************************!*\
  !*** ./client/dom/dom-tree.js ***!
  \********************************/
/*! no static exports found */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst DOM = module.exports;\n\n/**\n * check class of element\n *\n * @param element\n * @param className\n */\nmodule.exports.isContainClass = (element, className) => {\n    if (!element)\n        throw Error('element could not be empty!');\n    \n    if (!className)\n        throw Error('className could not be empty!');\n    \n    const classList = element.classList;\n    const ret = classList.contains(className);\n    \n    return ret;\n};\n\n/**\n * Function search element by tag\n * @param tag - className\n * @param element - element\n */\nmodule.exports.getByTag = (tag, element = document) => {\n    return element.getElementsByTagName(tag);\n};\n\n/**\n * Function search element by id\n * @param Id - id\n */\nmodule.exports.getById = (id, element = document) => {\n    return element.querySelector('#' + id);\n};\n\n/**\n * Function search first element by class name\n * @param className - className\n * @param element - element\n */\nmodule.exports.getByClass = (className, element = document) => {\n    return DOM.getByClassAll(className, element)[0];\n};\n\nmodule.exports.getByDataName = (attribute, element = document) => {\n    const selector    = '[' + 'data-name=\"' + attribute + '\"]';\n    return element.querySelector(selector);\n};\n\n/**\n * Function search element by class name\n * @param pClass - className\n * @param element - element\n */\nmodule.exports.getByClassAll = (className, element) => {\n    return (element || document).getElementsByClassName(className);\n};\n\n/**\n * add class=hidden to element\n *\n * @param element\n */\nmodule.exports.hide = (element) => {\n    element.classList.add('hidden');\n    return DOM;\n};\n\nmodule.exports.show = (element) => {\n    element.classList.remove('hidden');\n    return DOM;\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./client/dom/dom-tree.js\n// module id = 30\n// module chunks = 16\n\n//# sourceURL=file://cloudcmd/client/dom/dom-tree.js");

/***/ }),
/* 31 */
/*!*********************************!*\
  !*** ./client/dom/directory.js ***!
  \*********************************/
/*! no static exports found */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* global CloudCmd */\n/* global DOM */\n\n\n\nconst Images = __webpack_require__(/*! ./images */ 1);\nconst {FS} = __webpack_require__(/*! ../../common/cloudfunc */ 3);\n\nmodule.exports = (items) => {\n    const Info = DOM.CurrentInfo;\n    const load = DOM.load;\n    const Dialog = DOM.Dialog;\n    \n    if (items.length)\n        Images.show('top');\n    \n    const entries = [...items].map((item) => {\n        return item.webkitGetAsEntry();\n    });\n    \n    const addDir = (name) => {\n        return `/modules/${name}/lib/${name}.js`;\n    };\n    \n    const array   = [\n        'findit',\n        'philip'\n    ];\n    \n    const url = CloudCmd.join(array.map(addDir));\n    \n    load.js(url, () => {\n        const path = Info.dirPath\n            .replace(/\\/$/, '');\n        \n        const uploader = window.philip(entries, (type, name, data, i, n, callback) => {\n            const prefixURL = CloudCmd.PREFIX_URL;\n            const full = prefixURL + FS + path + name;\n            \n            let upload;\n            switch(type) {\n            case 'file':\n                upload = uploadFile(full, data);\n                break;\n            \n            case 'directory':\n                upload = uploadDir(full);\n                break;\n            }\n            \n            upload.on('end', callback);\n            \n            upload.on('progress', (count) => {\n                const current = percent(i, n);\n                const next = percent(i + 1, n);\n                const max = next - current;\n                const value = current + percent(count, 100, max);\n                \n                setProgress(value);\n            });\n        });\n        \n        uploader.on('error', (error) => {\n            Dialog.alert(error);\n            uploader.abort();\n        });\n        \n        uploader.on('progress', setProgress);\n        uploader.on('end', CloudCmd.refresh);\n    });\n};\n\nfunction percent(i, n, per = 100) {\n    return Math.round(i * per / n);\n}\n\nfunction setProgress(count) {\n    DOM.Images\n        .setProgress(count)\n        .show('top');\n}\n\nfunction uploadFile(url, data) {\n    return DOM.load.put(url, data);\n}\n\nfunction uploadDir(url) {\n    return DOM.load.put(url + '?dir');\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./client/dom/directory.js\n// module id = 31\n// module chunks = 16\n\n//# sourceURL=file://cloudcmd/client/dom/directory.js");

/***/ }),
/* 32 */
/*!***********************************!*\
  !*** ./client/dom/load-remote.js ***!
  \***********************************/
/*! no static exports found */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\n/* global CloudCmd */\n\nconst exec = __webpack_require__(/*! execon */ 0);\nconst rendy = __webpack_require__(/*! rendy */ 11);\nconst itype = __webpack_require__(/*! itype/legacy */ 4);\nconst {findObjByNameInArr} = __webpack_require__(/*! ../../common/util */ 5);\n\nconst load = __webpack_require__(/*! ./load */ 2);\nconst Files = __webpack_require__(/*! ./files */ 10);\n\nmodule.exports = (name, options, callback = options) => {\n    const {PREFIX, config} = CloudCmd;\n    const o = options;\n    \n    if (o.name && window[o.name])\n        return callback();\n    \n    Files.get('modules', (error, modules) => {\n        const online = config('online') && navigator.onLine;\n        const module = findObjByNameInArr(modules.remote, name);\n        \n        const isArray = itype.array(module.local);\n        const version = module.version;\n        \n        let remoteTmpls, local;\n        if (isArray) {\n            remoteTmpls = module.remote;\n            local       = module.local;\n        } else {\n            remoteTmpls  = [module.remote];\n            local        = [module.local];\n        }\n        \n        const localURL = local.map((url) => {\n            return PREFIX + url;\n        });\n        \n        const remoteURL = remoteTmpls.map((tmpl) => {\n            return rendy(tmpl, {\n                version: version\n            });\n        });\n        \n        const on = funcON(localURL, remoteURL, callback);\n        const off = funcOFF(localURL, callback);\n        \n        exec.if(online, on, off);\n    });\n};\n\nfunction funcOFF(local, callback) {\n    return () => {\n        load.parallel(local, callback);\n    };\n}\n\nfunction funcON (local, remote,callback) {\n    return () => {\n        load.parallel(remote, (error) => {\n            if (error)\n                return funcOFF();\n            \n            callback();\n        });\n    };\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./client/dom/load-remote.js\n// module id = 32\n// module chunks = 16\n\n//# sourceURL=file://cloudcmd/client/dom/load-remote.js");

/***/ }),
/* 33 */
/*!*****************************************!*\
  !*** ./client/dom/select-by-pattern.js ***!
  \*****************************************/
/*! no static exports found */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\n/* global DOM */\n\nlet SelectType = '*.*';\nconst TITLE = 'Cloud Commander';\n\nconst {getRegExp} = __webpack_require__(/*! ../../common/util */ 5);\n\nmodule.exports = (msg, files) => {\n    const allMsg = `Specify file type for ${msg} selection`;\n    const cancel = false;\n    const {Dialog} = DOM;\n    \n    Dialog.prompt(TITLE, allMsg, SelectType, {cancel}).then((type) => {\n        SelectType = type;\n        \n        const regExp = getRegExp(type);\n        \n        if (!files)\n            return;\n        \n        let matches = 0;\n        \n        files.forEach((current) => {\n            const name = DOM.getCurrentName(current);\n             \n            if (name === '..')\n                return;\n            \n            const isMatch = regExp.test(name);\n            \n            if (!isMatch)\n                return;\n            \n            ++matches;\n            \n            let isSelected = DOM.isSelected(current);\n            const shouldSel = msg === 'expand';\n             \n            if (shouldSel)\n                isSelected = !isSelected;\n            \n            if (isSelected)\n                DOM.toggleSelectedFile(current);\n        });\n        \n        if (!matches)\n            Dialog.alert('Select Files', 'No matches found!');\n    });\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./client/dom/select-by-pattern.js\n// module id = 33\n// module chunks = 16\n\n//# sourceURL=file://cloudcmd/client/dom/select-by-pattern.js");

/***/ }),
/* 34 */
/*!**************************!*\
  !*** ./client/client.js ***!
  \**************************/
/*! no static exports found */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nconst itype = __webpack_require__(/*! itype/legacy */ 4);\nconst rendy = __webpack_require__(/*! rendy */ 11);\nconst exec = __webpack_require__(/*! execon */ 0);\nconst Images = __webpack_require__(/*! ./dom/images */ 1);\nconst join = __webpack_require__(/*! join-io/www/join */ 35);\nconst jonny = __webpack_require__(/*! jonny */ 7);\n\nconst {\n    apiURL,\n    formatMsg,\n    buildFromJSON,\n} = __webpack_require__(/*! ../common/cloudfunc */ 3);\n\n/* global Util, DOM */\n\nmodule.exports = new CloudCmdProto(Util, DOM);\n\nfunction CloudCmdProto(Util, DOM) {\n    let Key;\n    let Debug;\n    let Listeners;\n    \n    const log = (str) => {\n        if (!Debug)\n            return;\n        \n        console.log(str);\n    };\n    \n    const CloudCmd = this;\n    const Info = DOM.CurrentInfo;\n    const Storage = DOM.Storage;\n    const Files = DOM.Files;\n    \n    this.log = log;\n    this.PREFIX = '';\n    this.PREFIX_URL = '';\n    this.DIRCLIENT = '/dist/';\n    this.DIRCLIENT_MODULES = this.DIRCLIENT + 'modules/';\n    \n    this.MIN_ONE_PANEL_WIDTH    = 1155;\n    this.HOST                   = location.origin ||\n                                  location.protocol + '//' + location.host;\n    \n    const TITLE = 'Cloud Commander';\n    this.TITLE = TITLE;\n    \n    this.sort = {\n        left: 'name',\n        right: 'name',\n    };\n    \n    this.order = {\n        left: 'asc',\n        right: 'asc',\n    };\n    \n    log.enable = () => {\n        Debug = true;\n    };\n    \n    log.disable = () => {\n        Debug = false;\n    };\n    \n    const kebabToCamelCase = Util.kebabToCamelCase;\n    \n    /**\n     * Функция привязываеться ко всем ссылкам и\n     *  загружает содержимое каталогов\n     *\n     * @param params - {\n     *          paramLink - ссылка\n     *          needRefresh - необходимость обязательной загрузки данных с сервера\n     *          panel\n     *      }\n     * @param callback\n     */\n    this.loadDir = (params, callback) => {\n        const p = params;\n        \n        const refresh = p.isRefresh;\n        const panel = p.panel;\n        const history = p.history;\n        const noCurrent = p.noCurrent;\n        const currentName = p.currentName;\n        \n        let panelChanged;\n        if (!noCurrent)\n            if (panel && panel !== Info.panel) {\n                DOM.changePanel();\n                panelChanged = true;\n            }\n        \n        let imgPosition;\n        if (panelChanged || refresh || !history)\n            imgPosition = 'top';\n        \n        Images.show.load(imgPosition, panel);\n        \n        /* загружаем содержимое каталога */\n        ajaxLoad(p.path, {\n            refresh,\n            history,\n            noCurrent,\n            currentName,\n        }, panel, callback);\n    };\n    \n    /**\n     * function load modules\n     * @params = {name, path, func, dobefore, arg}\n     */\n    function loadModule(params) {\n        if (!params)\n            return;\n        \n        let path = params.path;\n        const name = params.name || path && kebabToCamelCase(path);\n        const func = params.func;\n        const funcName = params.funcName;\n        const doBefore = params.dobefore;\n        \n        const isContain = /\\.js/.test(path);\n        \n        if (!isContain)\n            path += '.js';\n        \n        if (CloudCmd[name])\n            return;\n        \n        CloudCmd[name] = (...args) => {\n            const prefix = CloudCmd.PREFIX;\n            const pathFull = prefix + CloudCmd.DIRCLIENT_MODULES + path;\n            \n            exec(doBefore);\n            \n            const done = (error) => {\n                const Proto = CloudCmd[name];\n                \n                if (error || !itype.function(Proto))\n                    return;\n                \n                CloudCmd[name] = applyConstructor(Proto, args);\n            };\n            \n            return DOM.load.js(pathFull, func || done);\n        };\n        \n        CloudCmd[name][funcName] = CloudCmd[name];\n    }\n    \n    /*\n     * apply arguemnts to constructor\n     *\n     * @param constructor\n     * @param args\n     */\n    function applyConstructor(constructor, args) {\n        const F = function () {\n            return constructor.apply(this, args);\n        };\n        \n        F.prototype = constructor.prototype;\n        return new F();\n    }\n    \n    /**\n     * Конструктор CloudClient, который\n     * выполняет весь функционал по\n     * инициализации\n     */\n    this.init = (prefix, config) => {\n        const func = () => {\n            exec.series([\n                initModules,\n                baseInit,\n                loadPlugins,\n                () => {\n                    CloudCmd.route(location.hash);\n                }\n            ]);\n        };\n        \n        const funcBefore  = (callback) => {\n            const src = prefix + '/join:' + [\n                CloudCmd.DIRCLIENT_MODULES + 'polyfill.js',\n                '/modules/domtokenlist-shim/dist/domtokenlist.min.js',\n            ].join(':');\n            \n            DOM.loadJquery(() => {\n                DOM.load.js(src, callback);\n            });\n        };\n        \n        CloudCmd.PREFIX = prefix;\n        CloudCmd.PREFIX_URL = prefix + apiURL;\n        \n        CloudCmd.config = (key) => config[key];\n        CloudCmd._config = (key, value) => {\n            /*\n             * should be called from config.js only\n             * after successful update on server\n             */\n            config[key] = value;\n        };\n        \n        DOM.Storage.setAllowed(CloudCmd.config('localStorage'));\n        \n        if (config.onePanelMode)\n            CloudCmd.MIN_ONE_PANEL_WIDTH = Infinity;\n        \n        exec.if(document.body.scrollIntoViewIfNeeded, func, funcBefore);\n    };\n    \n    function loadPlugins(callback) {\n        const prefix = CloudCmd.PREFIX;\n        const plugins = prefix + '/plugins.js';\n        \n        DOM.load.js(plugins, callback);\n    }\n    \n    this.join = (urls) => {\n        const prefix  = CloudCmd.PREFIX;\n        \n        if (!Array.isArray(urls))\n            throw Error('urls should be array!');\n        \n        const noPrefixUrls = urls.map((url) => {\n            return url.replace(prefix, '');\n        });\n        \n        return prefix + join(noPrefixUrls);\n    };\n    \n    this.route = (path) => {\n        const query = path.split('/');\n        \n        if (!path)\n            return;\n        \n        const [kebabModule] = query;\n        const module = kebabToCamelCase(kebabModule.slice(1));\n        \n        const file = query[1];\n        const current = DOM.getCurrentByName(file);\n        \n        if (file && !current) {\n            const msg = formatMsg('set current file', file, 'error');\n            CloudCmd.log(msg);\n            return;\n        }\n        \n        DOM.setCurrentFile(current);\n        CloudCmd.execFromModule(module, 'show');\n    };\n    \n    this.logOut = () => {\n        const url = CloudCmd.PREFIX + '/logout';\n        const error = () => document.location.reload();\n        \n        DOM.load.ajax({url, error});\n    };\n    \n    function initModules(callback) {\n        exec.if(CloudCmd.Key, () => {\n            Key = new CloudCmd.Key();\n            CloudCmd.Key = Key;\n            Key.bind();\n        }, (func) => {\n            /* привязываем клавиши к функциям */\n            const path = 'key.js';\n            \n            loadModule({\n                path,\n                func\n            });\n        });\n        \n        Files.get('modules', (error, modules) => {\n            const showLoad = Images.show.load;\n            \n            const doBefore = {\n                'edit': showLoad,\n                'menu': showLoad,\n            };\n            \n            const load = (name, path, dobefore) => {\n                const isTmpl = path === 'template';\n                const funcName = isTmpl ? 'get' : 'show';\n                \n                loadModule({\n                    name,\n                    path,\n                    dobefore,\n                    funcName,\n                });\n            };\n            \n            if (!modules)\n                modules = [];\n            \n            modules.local.forEach((module) => {\n                load(null, module, doBefore[module]);\n            });\n            \n            callback();\n        });\n    }\n    \n    function baseInit(callback) {\n        const files = DOM.getFiles();\n        \n        /* выделяем строку с первым файлом */\n        if (files)\n            DOM.setCurrentFile(files[0], {\n                // when hash is present\n                // it should be handled with this.route\n                // overwre otherwise\n                history: !location.hash\n            });\n        \n        const dirPath = DOM.getCurrentDirPath();\n        Listeners = CloudCmd.Listeners;\n        Listeners.init();\n        \n        const panels = getPanels();\n        panels.forEach(Listeners.setOnPanel);\n        \n        Listeners.initKeysPanel();\n        \n        if (!CloudCmd.config('dirStorage'))\n            return callback();\n        \n        Storage.get(dirPath, (error, data) => {\n            if (!data) {\n                data = getJSONfromFileTable();\n                Storage.set(dirPath, data);\n            }\n            callback();\n        });\n    }\n    \n    function getPanels() {\n        const panels = ['left'];\n        \n        if (CloudCmd.config('onePanelMode'))\n            return panels;\n        \n        return [\n            ...panels,\n            'right',\n        ];\n    }\n    \n    this.execFromModule = (moduleName, funcName, ...args) => {\n        const obj = CloudCmd[moduleName];\n        const isObj = itype.object(obj);\n        \n        exec.if(isObj, () => {\n            const obj = CloudCmd[moduleName];\n            const func = obj[funcName];\n            \n            func(...args);\n        }, obj);\n    };\n    \n    this.refresh = (options = {}, callback) => {\n        if (!callback && typeof options === 'function') {\n            callback = options;\n            options = {};\n        }\n       \n        const panel = options.panel || Info.panel;\n        const path = DOM.getCurrentDirPath(panel);\n        \n        const isRefresh = true;\n        const history = false;\n        const noCurrent = options ? options.noCurrent : false;\n        const currentName = options.currentName;\n        \n        CloudCmd.loadDir({\n            path,\n            isRefresh,\n            history,\n            panel,\n            noCurrent,\n            currentName,\n        }, callback);\n    };\n    \n    /**\n     * Функция загружает json-данные о Файловой Системе\n     * через ajax-запрос.\n     * @param path - каталог для чтения\n     * @param options\n     * { refresh, history } - необходимость обновить данные о каталоге\n     * @param panel\n     * @param callback\n     *\n     */\n    function ajaxLoad(path, options, panel, callback) {\n        const create = (error, json) => {\n            const RESTful = DOM.RESTful;\n            const name = options.currentName || Info.name;\n            const obj = jonny.parse(json);\n            const isRefresh = options.refresh;\n            const noCurrent = options.noCurrent;\n            \n            if (!isRefresh && json)\n                return createFileTable(obj, panel, options, callback);\n            \n            const position = DOM.getPanelPosition(panel);\n            const sort = CloudCmd.sort[position];\n            const order = CloudCmd.order[position];\n            \n            const query = rendy('?sort={{ sort }}&order={{ order }}', {\n                sort,\n                order,\n            });\n            \n            RESTful.read(path + query, 'json', (error, obj) => {\n                if (error)\n                    return;\n                \n                options.sort = sort;\n                options.order = order;\n                \n                createFileTable(obj, panel, options, () => {\n                    if (isRefresh && !noCurrent)\n                        DOM.setCurrentByName(name);\n                    \n                    exec(callback);\n                });\n                \n                if (!CloudCmd.config('dirStorage'))\n                    return;\n                \n                Storage.set(path, obj);\n            });\n        };\n        \n        if (!options)\n            options    = {};\n        \n        CloudCmd.log('reading dir: \"' + path + '\";');\n        \n        if (!CloudCmd.config('dirStorage'))\n            return create();\n        \n        Storage.get(path, create);\n    }\n    \n    /**\n     * Функция строит файловую таблицу\n     * @param json  - данные о файлах\n     * @param panelParam\n     * @param history\n     * @param callback\n     */\n    function createFileTable(json, panelParam, options, callback) {\n        const {\n            history,\n            noCurrent,\n        } = options;\n        \n        const names = ['file', 'path', 'link', 'pathLink'];\n        \n        Files.get(names, (error, templFile, templPath, templLink, templPathLink) => {\n            const Dialog = DOM.Dialog;\n            const panel = panelParam || DOM.getPanel();\n            \n            const {\n                dir,\n                name,\n            } = Info;\n            \n            if (error)\n                return Dialog.alert(TITLE, error.responseText);\n            \n            const childNodes = panel.childNodes;\n            let i = childNodes.length;\n            \n            while (i--)\n                panel.removeChild(panel.lastChild);\n            \n            panel.innerHTML = buildFromJSON({\n                sort        : options.sort,\n                order       : options.order,\n                data        : json,\n                id          : panel.id,\n                prefix      : CloudCmd.PREFIX,\n                template    : {\n                    file        : templFile,\n                    path        : templPath,\n                    pathLink    : templPathLink,\n                    link        : templLink\n                }\n            });\n            \n            Listeners.setOnPanel(panel);\n            \n            if (!noCurrent) {\n                let current;\n                \n                if (name === '..' && dir !== '/')\n                    current = DOM.getCurrentByName(dir);\n                \n                if (!current)\n                    current = DOM.getFiles(panel)[0];\n                    \n                DOM.setCurrentFile(current, {\n                    history: history\n                });\n            }\n            \n            exec(callback);\n        });\n    }\n    \n    /**\n     * Функция генерирует JSON из html-таблицы файлов и\n     * используеться при первом заходе в корень\n     */\n    function getJSONfromFileTable() {\n        const path = DOM.getCurrentDirPath();\n        const infoFiles = Info.files || [];\n        \n        const notParent = (current) => {\n            const name = DOM.getCurrentName(current);\n            return name !== '..';\n        };\n        \n        const parse = (current) => {\n            const name = DOM.getCurrentName(current);\n            const size = DOM.getCurrentSize(current);\n            const owner = DOM.getCurrentOwner(current);\n            const mode = DOM.getCurrentMode(current);\n            const date = DOM.getCurrentDate(current);\n            \n            return {\n                name,\n                size,\n                mode,\n                owner,\n                date,\n            };\n        };\n        \n        const files = infoFiles\n            .filter(notParent)\n            .map(parse);\n        \n        const fileTable = {\n            path,\n            files,\n        };\n        \n        return fileTable;\n    }\n    \n    this.goToParentDir = () => {\n        const dir = Info.dir;\n        const {\n            dirPath,\n            parentDirPath,\n        } = Info;\n        \n        if (dirPath === parentDirPath)\n            return;\n        \n        const path = Info.dirPath || parentDirPath;\n        \n        CloudCmd.loadDir({path}, () => {\n            const panel = Info.panel;\n            const current = DOM.getCurrentByName(dir);\n            const first = DOM.getFiles(panel)[0];\n            \n            DOM.setCurrentFile(current || first, {\n                history\n            });\n        });\n    };\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./client/client.js\n// module id = 34\n// module chunks = 16\n\n//# sourceURL=file://cloudcmd/client/client.js");

/***/ }),
/* 35 */
/*!******************************************!*\
  !*** ./node_modules/join-io/www/join.js ***!
  \******************************************/
/*! no static exports found */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

eval("/* WEBPACK VAR INJECTION */(function(global) {(function(scope) {\n    'use strict';\n    \n    var Scope   = scope.window ? window : global,\n        \n        PREFIX  = '/join';\n    \n    if (typeof module === 'object' && module.exports)\n        module.exports  = join;\n    else\n        Scope.join      = join;\n    \n    function join (prefix, names) {\n        var url;\n        \n        if (!names) {\n            names   = prefix;\n            prefix  = PREFIX;\n        }\n        \n        if (!names)\n            throw(Error('names must be array!'));\n        \n        url = prefix + ':' + names.join(':');\n        \n        return url;\n    }\n    \n})(this);\n\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! ./../../webpack/buildin/global.js */ 16)))\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/join-io/www/join.js\n// module id = 35\n// module chunks = 16\n\n//# sourceURL=file://cloudcmd/node_modules/join-io/www/join.js");

/***/ }),
/* 36 */
/*!******************************!*\
  !*** ./client/dom/dialog.js ***!
  \******************************/
/*! no static exports found */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* global DOM */\n/* global smalltalk */\n\n\n\nmodule.exports = Dialog;\n\nfunction Dialog(prefix, config) {\n    if (!(this instanceof Dialog))\n        return new Dialog(prefix, config);\n    \n    load(config.htmlDialogs);\n    \n    function getJsName(htmlDialogs) {\n        const is = window.Promise;\n        const js = '.min.js';\n        const jsName = is ? js : '.poly' + js;\n        \n        if (!htmlDialogs)\n            return '.native' + jsName;\n        \n        return jsName;\n    }\n    \n    function load(htmlDialogs) {\n        const noop = () => {};\n        const name = 'smalltalk';\n        const dir = '/modules/' + name + '/dist/';\n        const jsName = getJsName(htmlDialogs);\n        \n        const names = [jsName, '.min.css'].map((ext) => {\n            return prefix + dir + name + ext;\n        });\n        \n        DOM.load.parallel(names, noop);\n    }\n    \n    const alert = (title, message) => {\n        return smalltalk.alert(title, message);\n    };\n    \n    this.alert = alert;\n    \n    this.prompt = (title, message, value, options) => {\n        return smalltalk.prompt(title, message, value, options);\n    };\n    \n    this.confirm = (title, message, options) => {\n        return smalltalk.confirm(title, message, options);\n    };\n    \n    this.alert.noFiles = (title) => {\n        return alert(title, 'No files selected!');\n    };\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./client/dom/dialog.js\n// module id = 36\n// module chunks = 16\n\n//# sourceURL=file://cloudcmd/client/dom/dialog.js");

/***/ }),
/* 37 */
/*!***********************************!*\
  !*** ./client/listeners/index.js ***!
  \***********************************/
/*! no static exports found */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* global DOM, CloudCmd */\n\n\n\nconst exec = __webpack_require__(/*! execon */ 0);\nconst itype = __webpack_require__(/*! itype/legacy */ 4);\nconst currify = __webpack_require__(/*! currify/legacy */ 6);\nconst getRange = __webpack_require__(/*! ./get-range */ 38);\n\nconst getIndex = currify(__webpack_require__(/*! ./get-index */ 39));\n\nconst uploadFiles = __webpack_require__(/*! ../dom/upload-files */ 18);\n\nconst {\n    FS,\n    apiURL\n} = __webpack_require__(/*! ../../common/cloudfunc */ 3);\n\nmodule.exports.init = () => {\n    contextMenu();\n    dragndrop();\n    unload();\n    pop();\n    resize();\n    config();\n    header();\n};\n\nCloudCmd.Listeners = module.exports;\n\nconst unselect = (event) => {\n    const isMac = /Mac/.test(window.navigator.platform);\n    const {\n        shiftKey,\n        metaKey,\n        ctrlKey,\n    } = event;\n    \n    if (shiftKey || isMac && metaKey || ctrlKey)\n        return;\n    \n    DOM.unselectFiles();\n};\n\nconst execAll = currify((funcs, event) => {\n    funcs.forEach((fn) => {\n        fn(event);\n    });\n});\n\n\nconst Info = DOM.CurrentInfo;\nconst Storage = DOM.Storage;\nconst Events = DOM.Events;\nconst EventsFiles = {\n    mousedown: exec.with(execIfNotUL, setCurrentFileByEvent),\n    click: execAll([onClick, unselect]),\n    dragstart: exec.with(execIfNotUL, onDragStart),\n    dblclick: exec.with(execIfNotUL, onDblClick),\n    touchstart: exec.with(execIfNotUL, onTouch)\n};\n\nlet EXT;\n\nfunction header() {\n    const fm = DOM.getFM();\n    \n    const isDataset = (el) => el.dataset;\n    \n    var isPanel = (el) => {\n        return /^js-(left|right)$/.test(el.dataset.name);\n    };\n    \n    Events.addClick(fm, (event) => {\n        const el = event.target;\n        const parent = el.parentElement;\n        \n        if (parent.dataset.name !== 'js-fm-header')\n            return;\n        \n        const name = (el.dataset.name || '')\n            .replace('js-', '');\n        \n        if (!/^(name|size|date)$/.test(name))\n            return;\n        \n        const panel = getPath(el)\n            .filter(isDataset)\n            .filter(isPanel)\n            .pop();\n        \n        CloudCmd.sortPanel(name, panel);\n    });\n}\n\nfunction getPath(el, path = []) {\n    if (!el)\n        return path;\n    \n    return getPath(el.parentElement, path.concat(el));\n}\n\nfunction config() {\n    DOM.Files.get('config', (e, config) => {\n        const type = config && config.packer;\n        EXT = DOM.getPackerExt(type);\n    });\n}\n\nmodule.exports.initKeysPanel = () => {\n    const keysElement = DOM.getById('js-keyspanel');\n    \n    if (!keysElement)\n        return;\n    \n    Events.addClick(keysElement, ({target}) => {\n        const id = target.id;\n        const operation = (name) => {\n            const Operation = CloudCmd.Operation;\n            const fn = Operation.show.bind(null, name);\n            \n            return fn;\n        };\n        \n        const clickFuncs = {\n            'f1'        : CloudCmd.Help.show,\n            'f2'        : DOM.renameCurrent,\n            'f3'        : CloudCmd.View.show,\n            'f4'        : CloudCmd.EditFile.show,\n            'f5'        : operation('copy'),\n            'f6'        : operation('move'),\n            'f7'        : DOM.promptNewDir,\n            'f8'        : operation('delete'),\n            'f9'        : CloudCmd.Menu.show,\n            'f10'       : CloudCmd.Config.show,\n            '~'         : CloudCmd.Konsole.show,\n            'shift~'    : CloudCmd.Terminal.show,\n            'contact'   : CloudCmd.Contact.show,\n        };\n       \n        exec(clickFuncs[id]);\n    });\n};\n\nconst getPanel = (side) => {\n    if (!itype.string(side))\n        return side;\n    \n    return DOM.getByDataName('js-' + side);\n};\n\nmodule.exports.setOnPanel = (side) => {\n    const panel = getPanel(side);\n    \n    const filesElement = DOM.getByDataName('js-files', panel);\n    const pathElement = DOM.getByDataName('js-path', panel);\n    \n    /* ставим загрузку гифа на клик*/\n    Events.addClick(pathElement, getPathListener(panel));\n    Events.add(filesElement, EventsFiles);\n};\n\nfunction getPathListener(panel) {\n    return onPathElementClick.bind(null, panel);\n}\n\nfunction isNoCurrent(panel) {\n    const infoPanel = Info.panel;\n    const namePanel = panel.getAttribute('data-name');\n    const nameInfoPanel = infoPanel.getAttribute('data-name');\n        \n    if (namePanel !== nameInfoPanel)\n        return true;\n    \n    return false;\n}\n\nfunction onPathElementClick(panel, event) {\n    let link, href, url, noCurrent;\n    \n    const prefix = CloudCmd.PREFIX;\n    const element = event.target;\n    const attr = element.getAttribute('data-name');\n    \n    switch (attr) {\n    case 'js-clear-storage':\n        Storage.clear();\n        break;\n    \n    case 'js-refresh':\n        noCurrent = isNoCurrent(panel);\n        \n        CloudCmd.refresh({\n            panel,\n            noCurrent\n        });\n        \n        event.preventDefault();\n        break;\n    \n    case 'js-path-link':\n        url         = CloudCmd.HOST;\n        href        = element.href;\n        link        = href.replace(url, '');\n        /**\n         * browser doesn't replace % -> %25%\n         * do it for him\n         */\n        link        = link.replace('%%', '%25%');\n        link        = decodeURI(link);\n        link        = link.replace(RegExp('^' + prefix + FS), '') || '/';\n        \n        noCurrent   = isNoCurrent(panel);\n        \n        CloudCmd.loadDir({\n            path        : link,\n            isRefresh   : false,\n            panel       : noCurrent ? panel : Info.panel\n        });\n        \n        event.preventDefault();\n    }\n}\n\nfunction execIfNotUL(callback, event) {\n    const {target} = event;\n    const {tagName} = target;\n    \n    if (tagName !== 'UL')\n        callback(event);\n}\n\nfunction onClick(event) {\n    const ctrl = event.ctrlKey;\n    \n    if (!ctrl)\n        event.preventDefault();\n    \n    changePanel(event.target);\n}\n\nfunction toggleSelect(key, files) {\n    const isMac = /Mac/.test(window.navigator.platform);\n    \n    if (!key)\n        throw Error('key should not be undefined!');\n    \n    const [file] = files;\n    \n    if (isMac && key.meta || key.ctrl)\n        return DOM.toggleSelectedFile(file);\n    \n    if (key.shift)\n        return files.forEach(DOM.selectFile);\n}\n\nfunction changePanel(element) {\n    const {panel} = Info;\n    const files = DOM.getByDataName('js-files', panel);\n    const ul = getULElement(element);\n    \n    if (ul !== files)\n        DOM.changePanel();\n}\n\nfunction onDblClick(event) {\n    const current = getLIElement(event.target);\n    const isDir = DOM.isCurrentIsDir(current);\n    const path = DOM.getCurrentPath(current);\n    \n    if (isDir) {\n        CloudCmd.loadDir({\n            path: path === '/' ? '/' : path + '/'\n        });\n        \n        event.preventDefault();\n    }\n}\n\nfunction onTouch(event) {\n    const current = getLIElement(event.target);\n    const isDir = DOM.isCurrentIsDir(current);\n    \n    if (!isDir)\n        return;\n    \n    const isCurrent = DOM.isCurrentFile(current);\n    \n    if (!isCurrent)\n        return;\n    \n    CloudCmd.loadDir({\n        path: DOM.getCurrentPath(current)\n    });\n    \n    event.preventDefault();\n}\n\n/*\n  * download file from browser to desktop\n  * in Chrome (HTML5)\n  */\nfunction onDragStart(event) {\n    const element = getLIElement(event.target);\n    const isDir = Info.isDir;\n    let link = DOM.getCurrentLink(element);\n    let name = DOM.getCurrentName(element);\n    \n    /* if it's directory - adding json extension */\n    if (isDir) {\n        name += EXT;\n        link = document.createElement('a');\n        link.textContent = name;\n        link.href = apiURL + '/pack' + Info.path + EXT;\n    }\n    \n    event.dataTransfer.setData('DownloadURL',\n        'application/octet-stream'  + ':' +\n        name                        + ':' +\n        link);\n}\n\nfunction getLIElement(element) {\n    if (!element)\n        return element;\n    \n    while (element.tagName !== 'LI')\n        element = element.parentElement;\n    \n    return element;\n}\n\nfunction getULElement(element) {\n    while (element.tagName !== 'UL')\n        element = element.parentElement;\n    \n    return element;\n}\n\nfunction setCurrentFileByEvent(event) {\n    const BUTTON_LEFT = 0;\n    \n    const key = {\n        alt: event.altKey,\n        ctrl: event.ctrlKey,\n        meta: event.metaKey,\n        shift: event.shiftKey\n    };\n    \n    const element = getLIElement(event.target);\n    \n    const fromName = Info.name;\n    DOM.setCurrentFile(element);\n    const toName = Info.name;\n    \n    let files = [];\n    \n    if (key.shift)\n        files = getFilesRange(fromName, toName);\n    else\n        files.push(Info.element);\n    \n    if (event.button === BUTTON_LEFT)\n        toggleSelect(key, files);\n}\n\nfunction getFilesRange(from, to) {\n    const files = DOM.getAllFiles();\n    const names = DOM.getFilenames(files);\n    const getNameIndex = getIndex(names);\n    \n    const indexFrom = getNameIndex(from);\n    const indexTo = getNameIndex(to);\n    \n    return getRange(indexFrom, indexTo, files);\n}\n\nfunction contextMenu() {\n    const fm = DOM.getFM();\n    \n    Events.addOnce('contextmenu', fm, (event) => {\n        CloudCmd.Menu.show({\n            x: event.clientX,\n            y: event.clientY\n        });\n    });\n    \n    Events.addContextMenu(fm, (event) => {\n        CloudCmd.Menu.ENABLED || event.preventDefault();\n    });\n}\n\nfunction dragndrop() {\n    const panels = DOM.getByClassAll('panel');\n    const select = () => {\n        [...panels].forEach((panel) => {\n            panel.classList.add('selected-panel');\n        });\n    };\n    \n    const unselect = () => {\n        [...panels].forEach((panel) => {\n            panel.classList.remove('selected-panel');\n        });\n    };\n    \n    const onDrop = (event) => {\n        const files = event.dataTransfer.files;\n        const items = event.dataTransfer.items;\n        const {length: filesCount} = files;\n        \n        event.preventDefault();\n        \n        if (filesCount && (!items || !items.length || !items[0].webkitGetAsEntry))\n            return uploadFiles(files);\n        \n        const isFile = (item) => item.kind === 'file';\n        const dirFiles = [...items].filter(isFile);\n        \n        if (dirFiles.length)\n            return DOM.uploadDirectory(dirFiles);\n        \n        return CloudCmd.Operation.show('copy');\n    };\n    \n    /**\n     * In Mac OS Chrome dropEffect = 'none'\n     * so drop do not firing up when try\n     * to upload file from download bar\n     */\n    const onDragOver = (event) => {\n        const dataTransfer = event.dataTransfer;\n        const effectAllowed = dataTransfer.effectAllowed;\n        \n        if (/move|linkMove/.test(effectAllowed))\n            dataTransfer.dropEffect = 'move';\n        else\n            dataTransfer.dropEffect = 'copy';\n        \n        event.preventDefault();\n    };\n    \n    Events.add('dragenter', select);\n    Events.add(['dragleave', 'drop'], unselect);\n    \n    [...panels].forEach((panel) => {\n        Events.add('dragover', panel, onDragOver)\n            .add('drop', panel, onDrop);\n    });\n}\n\nfunction unload() {\n    DOM.Events.add(['unload', 'beforeunload'], (event) => {\n        const Key = CloudCmd.Key;\n        const isBind = Key && Key.isBind();\n        \n        if (isBind)\n            return;\n        \n        event.preventDefault();\n        return 'Please make sure that you saved all work.';\n    });\n}\n\nfunction pop() {\n    Events.add('popstate', (event) => {\n        const path = event.state.replace(FS, '');\n        \n        if (!path)\n            return CloudCmd.route(location.hash);\n        \n        const history = false;\n        CloudCmd.loadDir({\n            path,\n            history,\n        });\n    });\n}\n\nfunction resize() {\n    Events.add('resize', () => {\n        const is = window.innerWidth < CloudCmd.MIN_ONE_PANEL_WIDTH;\n        \n        if (!is)\n            return;\n        \n        const {panel} = Info;\n        const isEmptyRoot = !panel;\n        \n        if (isEmptyRoot)\n            return;\n        \n        const name = panel.getAttribute('data-name');\n        const isLeft = name === 'js-left';\n        \n        if (isLeft)\n            return;\n        \n        DOM.changePanel();\n    });\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./client/listeners/index.js\n// module id = 37\n// module chunks = 16\n\n//# sourceURL=file://cloudcmd/client/listeners/index.js");

/***/ }),
/* 38 */
/*!***************************************!*\
  !*** ./client/listeners/get-range.js ***!
  \***************************************/
/*! no static exports found */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nmodule.exports = (indexFrom, indexTo, files) => {\n    if (indexFrom < indexTo)\n        return files.slice(indexFrom, indexTo + 1);\n    \n    if (indexFrom > indexTo)\n        return files.slice(indexTo, indexFrom + 1);\n    \n    return [files[indexFrom]];\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./client/listeners/get-range.js\n// module id = 38\n// module chunks = 16\n\n//# sourceURL=file://cloudcmd/client/listeners/get-range.js");

/***/ }),
/* 39 */
/*!***************************************!*\
  !*** ./client/listeners/get-index.js ***!
  \***************************************/
/*! no static exports found */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nmodule.exports = (array, item) => {\n    const index = array.indexOf(item);\n    \n    if (!~index)\n        return 0;\n    \n    return index;\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./client/listeners/get-index.js\n// module id = 39\n// module chunks = 16\n\n//# sourceURL=file://cloudcmd/client/listeners/get-index.js");

/***/ }),
/* 40 */
/*!***********************************************!*\
  !*** ./node_modules/wraptile/legacy/index.js ***!
  \***********************************************/
/*! no static exports found */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

eval("module.exports = __webpack_require__(/*! ./lib/wraptile */ 41);\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/wraptile/legacy/index.js\n// module id = 40\n// module chunks = 16\n\n//# sourceURL=file://cloudcmd/node_modules/wraptile/legacy/index.js");

/***/ }),
/* 41 */
/*!******************************************************!*\
  !*** ./node_modules/wraptile/legacy/lib/wraptile.js ***!
  \******************************************************/
/*! no static exports found */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar wrap = function wrap(fn) {\n    for (var _len = arguments.length, a = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        a[_key - 1] = arguments[_key];\n    }\n\n    return function () {\n        for (var _len2 = arguments.length, b = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n            b[_key2] = arguments[_key2];\n        }\n\n        return function () {\n            for (var _len3 = arguments.length, c = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n                c[_key3] = arguments[_key3];\n            }\n\n            return fn.apply(undefined, a.concat(b, c));\n        };\n    };\n};\n\nmodule.exports = function (fn) {\n    for (var _len4 = arguments.length, a = Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {\n        a[_key4 - 1] = arguments[_key4];\n    }\n\n    check(fn);\n\n    return wrap.apply(undefined, [fn].concat(a));\n};\n\nfunction check(fn) {\n    if (typeof fn !== 'function') throw Error('fn should be function!');\n}\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/wraptile/legacy/lib/wraptile.js\n// module id = 41\n// module chunks = 16\n\n//# sourceURL=file://cloudcmd/node_modules/wraptile/legacy/lib/wraptile.js");

/***/ }),
/* 42 */
/*!*****************************!*\
  !*** ./client/key/index.js ***!
  \*****************************/
/*! no static exports found */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* global CloudCmd, DOM */\n\n\n\nconst Info = DOM.CurrentInfo;\n\nconst exec = __webpack_require__(/*! execon */ 0);\n\nconst Events = __webpack_require__(/*! ../dom/events */ 9);\nconst Buffer = __webpack_require__(/*! ../dom/buffer */ 17);\nconst KEY = __webpack_require__(/*! ./key */ 19);\nconst vim = __webpack_require__(/*! ./vim */ 43);\nconst setCurrentByChar = __webpack_require__(/*! ./set-current-by-char */ 48);\nconst fullstore = __webpack_require__(/*! fullstore/legacy */ 12);\nconst Chars = fullstore();\n\nChars([]);\n\nKeyProto.prototype = KEY;\nCloudCmd.Key = KeyProto;\n\nfunction KeyProto() {\n    let Binded;\n    \n    const Key = this;\n    \n    this.isBind = () => {\n        return Binded;\n    };\n    \n    this.setBind = () => {\n        Binded = true;\n    };\n    \n    this.unsetBind = () => {\n        Binded = false;\n    };\n    \n    this.bind = () => {\n        Events.addKey(listener);\n        Binded = true;\n    };\n    \n    function getChar(event) {\n        /*\n          * event.keyIdentifier deprecated in chrome v51\n          * but event.key is absent in chrome <= v51\n          */\n        \n        if (event.key)\n            return event.key;\n        \n        return fromCharCode(event.keyIdentifier);\n    }\n    \n    function listener(event) {\n        const keyCode = event.keyCode;\n        const alt = event.altKey;\n        const ctrl = event.ctrlKey;\n        const shift = event.shiftKey;\n        const meta = event.metaKey;\n        const isBetween = keyCode >= KEY.ZERO && keyCode <= KEY.Z;\n        const isNumpad = /Numpad/.test(event.code);\n        \n        let char = getChar(event);\n        let isSymbol = ~['.', '_', '-', '+', '='].indexOf(char);\n        \n        if (!isSymbol) {\n            isSymbol = getSymbol(shift, keyCode);\n            \n            if (isSymbol)\n                char = isSymbol;\n        }\n        \n        if (!Key.isBind())\n            return;\n        \n        const isVim = CloudCmd.config('vim');\n        \n        if (!isVim && !isNumpad && !alt && !ctrl && !meta && (isBetween || isSymbol))\n            return setCurrentByChar(char, Chars);\n        \n        Chars([]);\n        switchKey(event);\n        \n        if (isVim)\n            vim(char, event);\n    }\n    \n    function getSymbol(shift, keyCode) {\n        switch (keyCode) {\n        case KEY.DOT:\n            return '.';\n        \n        case KEY.HYPHEN:\n            return shift ? '_' : '-';\n        \n        case KEY.EQUAL:\n            return shift ? '+' : '=';\n        }\n    }\n    \n    function fromCharCode(keyIdentifier) {\n        const code = keyIdentifier.substring(2);\n        const hex = parseInt(code, 16);\n        const char = String.fromCharCode(hex);\n        \n        return char;\n    }\n    \n    function switchKey(event) {\n        let i, isSelected, prev, next;\n        let current = Info.element;\n        let dataName;\n        \n        const name = Info.name;\n        \n        const {Operation} = CloudCmd;\n        const panel = Info.panel;\n        const path = Info.path;\n        const isDir = Info.isDir;\n        \n        const keyCode = event.keyCode;\n        const alt = event.altKey;\n        const shift = event.shiftKey;\n        const ctrl = event.ctrlKey;\n        const meta = event.metaKey;\n        const ctrlMeta = ctrl || meta;\n        \n        if (current) {\n            prev = current.previousSibling;\n            next = current.nextSibling;\n        }\n        \n        switch (keyCode) {\n        case Key.TAB:\n            DOM.changePanel();\n            event.preventDefault();\n            break;\n        \n        case Key.INSERT:\n            DOM .toggleSelectedFile(current)\n                .setCurrentFile(next);\n            break;\n        \n        case Key.INSERT_MAC:\n            DOM .toggleSelectedFile(current)\n                .setCurrentFile(next);\n            break;\n        \n        case Key.DELETE:\n            if (shift)\n                Operation.show('delete:silent');\n            else\n                Operation.show('delete');\n            break;\n        \n        case Key.ASTERISK:\n            DOM.toggleAllSelectedFiles(current);\n            break;\n        \n        case Key.PLUS:\n            DOM.expandSelection();\n            event.preventDefault();\n            break;\n        \n        case Key.MINUS:\n            DOM.shrinkSelection();\n            event.preventDefault();\n            break;\n        \n        case Key.F1:\n            CloudCmd.Help.show();\n            event.preventDefault();\n            break;\n        \n        case Key.F2:\n            DOM.renameCurrent(current);\n            break;\n            \n        case Key.F3:\n            if (shift)\n                CloudCmd.Markdown.show(path);\n            else if (ctrlMeta)\n                CloudCmd.sortPanel('name');\n            else\n                CloudCmd.View.show();\n            \n            event.preventDefault();\n            break;\n        \n        case Key.F4:\n            if (shift)\n                CloudCmd.EditFileVim.show();\n            else\n                CloudCmd.EditFile.show();\n            \n            event.preventDefault();\n            break;\n        \n        case Key.F5:\n            if (ctrlMeta)\n                CloudCmd.sortPanel('date');\n            else if (alt)\n                Operation.show('pack');\n            else\n                Operation.show('copy');\n            \n            event.preventDefault();\n            break;\n        \n        case Key.F6:\n            if (ctrlMeta)\n                CloudCmd.sortPanel('size');\n            else\n                Operation.show('move');\n            \n            event.preventDefault();\n            break;\n        \n        case Key.F7:\n            if (shift)\n                DOM.promptNewFile();\n            else\n                DOM.promptNewDir();\n            \n            event.preventDefault();\n            break;\n        \n        case Key.F8:\n            Operation.show('delete');\n            event.preventDefault();\n            break;\n        \n        case Key.F9:\n            if (alt)\n                Operation.show('extract');\n            else\n                CloudCmd.Menu.show();\n            event.preventDefault();\n            break;\n        \n        case Key.F10:\n            CloudCmd.Config.show();\n            event.preventDefault();\n            break;\n        \n        case Key.TRA:\n            event.preventDefault();\n            \n            if (shift)\n                return CloudCmd.Terminal.show();\n            \n            CloudCmd.Konsole.show();\n            break;\n        \n        case KEY.BRACKET_CLOSE:\n            CloudCmd.Konsole.show();\n            event.preventDefault();\n            break;\n        \n        case Key.SPACE:\n            if (!isDir || name === '..')\n                isSelected = true;\n            else\n                isSelected = DOM.isSelected(current);\n            \n            exec.if(isSelected, () => {\n                DOM.toggleSelectedFile(current);\n            }, (callback) => {\n                DOM.loadCurrentSize(callback, current);\n            });\n            \n            event.preventDefault();\n            break;\n        \n        case Key.U:\n            if (ctrlMeta) {\n                DOM.swapPanels();\n                event.preventDefault();\n            }\n            break;\n        \n        /* navigation on file table:        *\n         * in case of pressing button 'up', *\n         * select previous row              */\n        case Key.UP:\n            if (shift)\n                DOM.toggleSelectedFile(current);\n            \n            DOM.setCurrentFile(prev);\n            event.preventDefault();\n            break;\n        \n        /* in case of pressing button 'down', *\n         * select next row                    */\n        case Key.DOWN:\n            if (shift)\n                DOM.toggleSelectedFile(current);\n            \n            DOM.setCurrentFile(next);\n            event.preventDefault();\n            break;\n        \n        case Key.LEFT:\n            if (!alt)\n                return;\n            \n            event.preventDefault();\n            \n            dataName = Info.panel.getAttribute('data-name');\n            \n            if (dataName === 'js-right')\n                DOM.duplicatePanel();\n            \n            break;\n        \n        case Key.RIGHT:\n            if (!alt)\n                return;\n           \n            event.preventDefault();\n            \n            dataName = Info.panel.getAttribute('data-name');\n            \n            if (dataName === 'js-left')\n                DOM.duplicatePanel();\n            \n            break;\n        \n        /* in case of pressing button 'Home',  *\n         * go to top element                   */\n        case Key.HOME:\n            DOM.setCurrentFile(Info.first);\n            event.preventDefault();\n            break;\n        \n        /* in case of pressing button 'End', select last element */\n        case Key.END:\n            DOM.setCurrentFile(Info.last);\n            event.preventDefault();\n            break;\n        \n        /* если нажали клавишу page down проматываем экран */\n        case Key.PAGE_DOWN:\n            DOM.scrollByPages(panel, 1);\n            \n            for (i = 0; i < 30; i++) {\n                if (!current.nextSibling)\n                    break;\n                \n                current = current.nextSibling;\n            }\n            \n            DOM.setCurrentFile(current);\n            event.preventDefault();\n            break;\n        \n        /* если нажали клавишу page up проматываем экран */\n        case Key.PAGE_UP:\n            DOM.scrollByPages(panel, -1);\n            \n            for (i = 0; i < 30; i++) {\n                if (!current.previousSibling)\n                    break;\n                \n                current = current.previousSibling;\n            }\n            \n            DOM.setCurrentFile(current);\n            event.preventDefault();\n            break;\n            \n        /* open directory */\n        case Key.ENTER:\n            if (Info.isDir)\n                CloudCmd.loadDir({\n                    path: path === '/' ? '/' : path + '/'\n                });\n            break;\n            \n        case Key.BACKSPACE:\n            CloudCmd.goToParentDir();\n            event.preventDefault();\n            break;\n        \n        case Key.BACKSLASH:\n            if (ctrlMeta)\n                CloudCmd.loadDir({\n                    path: '/'\n                });\n            break;\n        \n        case Key.A:\n            if (ctrlMeta) {\n                DOM.selectAllFiles();\n                event.preventDefault();\n            }\n            \n            break;\n        \n        case Key.G:\n            if (alt) {\n                DOM.goToDirectory();\n                event.preventDefault();\n            }\n            \n            break;\n        \n        case Key.M:\n            if (ctrlMeta) {\n                CloudCmd.EditNames.show();\n                event.preventDefault();\n            }\n            \n            break;\n        \n        /**\n         * обновляем страницу,\n         * загружаем содержимое каталога\n         * при этом данные берём всегда с\n         * сервера, а не из кэша\n         * (обновляем кэш)\n         */\n        case Key.R:\n            if (ctrlMeta) {\n                CloudCmd.log('reloading page...\\n');\n                CloudCmd.refresh();\n                event.preventDefault();\n            }\n            break;\n        \n        case Key.C:\n            if (ctrlMeta)\n                Buffer.copy();\n            break;\n        \n        case Key.X:\n            if (ctrlMeta)\n                Buffer.cut();\n            break;\n            \n        case Key.V:\n            if (ctrlMeta)\n                Buffer.paste();\n            break;\n        \n        case Key.Z:\n            if (ctrlMeta)\n                Buffer.clear();\n            break;\n        \n        /* чистим хранилище */\n        case Key.D:\n            if (ctrlMeta) {\n                CloudCmd.log('clearing storage...');\n                \n                DOM.Storage.clear(() => {\n                    CloudCmd.log('storage cleared');\n                });\n                \n                event.preventDefault();\n            }\n            break;\n        }\n    }\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./client/key/index.js\n// module id = 42\n// module chunks = 16\n\n//# sourceURL=file://cloudcmd/client/key/index.js");

/***/ }),
/* 43 */
/*!*********************************!*\
  !*** ./client/key/vim/index.js ***!
  \*********************************/
/*! no static exports found */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/* global CloudCmd, DOM */\n\nconst KEY = __webpack_require__(/*! ../key */ 19);\nconst Info = DOM.CurrentInfo;\nconst Dialog = DOM.Dialog;\n\nconst fullstore = __webpack_require__(/*! fullstore/legacy */ 12);\nconst store = fullstore('');\nconst visual = fullstore(false);\nconst {\n    find,\n    findNext,\n    findPrevious,\n} = __webpack_require__(/*! ./find */ 44);\n\nconst TITLE = 'Cloud Commander';\n\nconst stopVisual = () => {\n    visual(false);\n};\n\nconst end = () => {\n    store('');\n};\n\nconst rmFirst = (a) => {\n    return a\n        .split('')\n        .slice(1)\n        .join('');\n};\n\nmodule.exports = (key, event) => {\n    const current = Info.element;\n    const keyCode = event.keyCode;\n    const prevStore = store();\n    \n    const value = store(prevStore.concat(key));\n    \n    if (keyCode === KEY.ENTER)\n        return end();\n    \n    if (keyCode === KEY.ESC) {\n        DOM.unselectFiles();\n        visual(false);\n        return end();\n    }\n    \n    if (key === 'j') {\n        move('next', {\n            prevStore,\n            current,\n        });\n        \n        return end();\n    }\n    \n    if (key === 'k') {\n        move('previous', {\n            prevStore,\n            current,\n        });\n        \n        return end();\n    }\n    \n    if (/gg/.test(value)) {\n        move('previous', {\n            current,\n            prevStore,\n            max: Infinity,\n        });\n        \n        return end();\n    }\n    \n    if (key === 'd' && (visual() || prevStore === 'd')) {\n        CloudCmd.Operation.show('delete');\n        stopVisual();\n        return end();\n    }\n    \n    if (key === 'G') {\n        move('next', {\n            current,\n            prevStore,\n            max: Infinity,\n        });\n        \n        return end();\n    }\n    \n    if (key === 'y') {\n        if (!visual())\n            return end();\n        \n        DOM.Buffer.copy();\n        stopVisual();\n        DOM.unselectFiles();\n        return end();\n    }\n    \n    if (/^p$/i.test(key)) {\n        DOM.Buffer.paste();\n        return end();\n    }\n    \n    if (/^v$/i.test(key)) {\n        DOM.toggleSelectedFile(current);\n        visual(!visual());\n        \n        return end();\n    }\n    \n    if (key === '/') {\n        event.preventDefault();\n        \n        Dialog.prompt(TITLE, 'Find', '', {cancel: false})\n            .then(find);\n       \n        return end();\n    }\n    \n    if (key === 'n') {\n        findNext();\n        return end();\n    }\n    \n    if (key === 'N') {\n        findPrevious();\n        return end();\n    }\n};\n\nmodule.exports.selectFile = selectFile;\n\nfunction move(sibling, {max, current, prevStore}) {\n    const isDelete = prevStore[0] === 'd';\n    \n    if (isDelete) {\n        visual(true);\n        prevStore = rmFirst(prevStore);\n    }\n    \n    const n = max || getNumber(prevStore);\n    \n    if (isNaN(n))\n        return;\n    \n    setCurrent({\n        n,\n        current,\n        sibling,\n        visual: visual(),\n    });\n    \n    if (isDelete)\n        CloudCmd.Operation.show('delete');\n}\n\nfunction getNumber(value) {\n    if (!value)\n        return 1;\n    \n    if (value === 'g')\n        return 1;\n    \n    return parseInt(value);\n}\n\nfunction selectFile(current) {\n    const name = DOM.getCurrentName(current);\n    \n    if (name === '..')\n        return;\n    \n    DOM.selectFile(current);\n}\n\nfunction setCurrent({n, current, visual, sibling}) {\n    const select = visual ? selectFile : DOM.unselectFile;\n    \n    select(current);\n    \n    const position = `${sibling}Sibling`;\n    for (let i = 0; i < n; i++) {\n        const next = current[position];\n        \n        if (!next)\n            break;\n        \n        current = next;\n        select(current);\n    }\n    \n    DOM.setCurrentFile(current);\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./client/key/vim/index.js\n// module id = 43\n// module chunks = 16\n\n//# sourceURL=file://cloudcmd/client/key/vim/index.js");

/***/ }),
/* 44 */
/*!********************************!*\
  !*** ./client/key/vim/find.js ***!
  \********************************/
/*! no static exports found */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n/* global DOM */\n\nconst fullstore = __webpack_require__(/*! fullstore/legacy */ 12);\nconst limier = __webpack_require__(/*! limier */ 45);\nconst Info = DOM.CurrentInfo;\n\nconst searchStore = fullstore([]);\nconst searchIndex = fullstore(0);\n\nmodule.exports.find = (value) => {\n    const names = Info.files.map(DOM.getCurrentName);\n    const result = limier(value, names);\n    \n    searchStore(result);\n    searchIndex(0);\n    \n    DOM.setCurrentByName(result[0]);\n};\n\nmodule.exports.findNext = () => {\n    const names = searchStore();\n    const index = next(searchIndex(), names.length);\n    \n    searchIndex(index);\n    DOM.setCurrentByName(names[searchIndex()]);\n};\n\nmodule.exports.findPrevious = () => {\n    const names = searchStore();\n    const index = previous(searchIndex(), names.length);\n    \n    searchIndex(index);\n    DOM.setCurrentByName(names[index]);\n};\n\nmodule.exports._next = next;\nmodule.exports._previous = previous;\n\nfunction next(index, length) {\n    if (index === length - 1)\n        return 0;\n    \n    return ++index;\n}\n\nfunction previous(index, length) {\n    if (!index)\n        return length - 1;\n    \n    return --index;\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./client/key/vim/find.js\n// module id = 44\n// module chunks = 16\n\n//# sourceURL=file://cloudcmd/client/key/vim/find.js");

/***/ }),
/* 45 */
/*!*******************************************!*\
  !*** ./node_modules/limier/lib/limier.js ***!
  \*******************************************/
/*! no static exports found */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nvar somefilter = __webpack_require__(/*! somefilter */ 46);\nvar checkResult = function checkResult(value) {\n    return value && value.length;\n};\nvar limier = somefilter(checkResult, [findByAbr, findByName]);\n\nmodule.exports = function (pattern, list) {\n    check(pattern, list);\n\n    return limier(pattern, list) || [];\n};\n\nfunction findByName(str, names) {\n    return names.filter(function (name) {\n        return ~name.indexOf(str);\n    });\n}\n\nfunction findByAbr(str, names) {\n    var regstr = str.split('').join('.*') + '.*';\n    var regexp = RegExp('^' + regstr + '$', 'i');\n\n    return names.filter(function (name) {\n        return regexp.test(name);\n    });\n}\n\nfunction check(pattern, list) {\n    if (typeof pattern !== 'string') throw Error('pattern should be string!');\n\n    if (!Array.isArray(list)) throw Error('list should be an array!');\n}\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/limier/lib/limier.js\n// module id = 45\n// module chunks = 16\n\n//# sourceURL=file://cloudcmd/node_modules/limier/lib/limier.js");

/***/ }),
/* 46 */
/*!***************************************************!*\
  !*** ./node_modules/somefilter/lib/somefilter.js ***!
  \***************************************************/
/*! no static exports found */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nfunction _typeof(obj) { return obj && typeof Symbol !== \"undefined\" && obj.constructor === Symbol ? \"symbol\" : typeof obj; }\n\nvar squad = __webpack_require__(/*! squad */ 20);\nvar apart = __webpack_require__(/*! apart */ 47);\n\nvar unary = function unary(fn) {\n    return function (value) {\n        return fn(value);\n    };\n};\nvar notEmpty = function notEmpty(value) {\n    return !!value;\n};\n\nmodule.exports = somefilter;\n\nfunction somefilter(condition, filters) {\n    if (!filters) {\n        filters = condition;\n        condition = notEmpty;\n    }\n\n    checkAll(condition, filters);\n\n    var storify = store(condition);\n    var process = apart(squad, condition, storify);\n\n    var processingFilters = filters.map(unary(process)).reverse();\n\n    return function () {\n        var _arguments = arguments;\n\n        processingFilters.some(function (filter) {\n            return filter.apply(undefined, _arguments);\n        });\n\n        return storify();\n    };\n}\n\nfunction store(condition) {\n    var cache = undefined;\n\n    return function (value) {\n        var result = undefined;\n\n        if (condition(value)) {\n            cache = result = value;\n        } else {\n            result = cache;\n            cache = null;\n        }\n\n        return result;\n    };\n}\n\nfunction checkAll(condition, filters) {\n    if (typeof condition !== 'function') throw Error('condition should be function!');\n\n    if (!Array.isArray(filters)) throw Error('filters should be an array!');\n\n    check('function', filters);\n}\n\nfunction check(type, array) {\n    var getType = function getType(item) {\n        return typeof item === 'undefined' ? 'undefined' : _typeof(item);\n    },\n        notEqual = function notEqual(a, b) {\n        return a !== b;\n    },\n        wrong = function wrong(type) {\n        throw Error('fn should be ' + type + '!');\n    },\n        wrongType = apart(wrong, type),\n        notType = apart(notEqual, type);\n\n    if (!array.length) wrongType(type);else array.map(getType).filter(notType).forEach(wrongType);\n}\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/somefilter/lib/somefilter.js\n// module id = 46\n// module chunks = 16\n\n//# sourceURL=file://cloudcmd/node_modules/somefilter/lib/somefilter.js");

/***/ }),
/* 47 */
/*!*****************************************!*\
  !*** ./node_modules/apart/lib/apart.js ***!
  \*****************************************/
/*! no static exports found */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\nfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i]; return arr2; } else { return Array.from(arr); } }\n\nvar tail = function tail(list) {\n    return slice(list, 1);\n};\n\nmodule.exports = apart;\n\nfunction apart(fn) {\n    check(fn);\n\n    var first = tail(arguments);\n\n    return function () {\n        var args = [].concat(_toConsumableArray(first), Array.prototype.slice.call(arguments));\n\n        return fn.apply(undefined, _toConsumableArray(args));\n    };\n}\n\nfunction slice(list, from, to) {\n    return [].slice.call(list, from, to);\n}\n\nfunction check(fn) {\n    if (typeof fn !== 'function') throw Error('fn should be function!');\n}\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/apart/lib/apart.js\n// module id = 47\n// module chunks = 16\n\n//# sourceURL=file://cloudcmd/node_modules/apart/lib/apart.js");

/***/ }),
/* 48 */
/*!*******************************************!*\
  !*** ./client/key/set-current-by-char.js ***!
  \*******************************************/
/*! no static exports found */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("/* global DOM */\n\n\n\nconst Info = DOM.CurrentInfo;\nconst {escapeRegExp} = __webpack_require__(/*! ../../common/util */ 5);\n\nmodule.exports = function setCurrentByChar(char, charStore) {\n    let firstByName;\n    let skipCount = 0;\n    let setted = false;\n    let i = 0;\n    \n    const escapeChar = escapeRegExp(char);\n    const regExp = new RegExp('^' + escapeChar + '.*$', 'i');\n    const {files} = Info;\n    const chars = charStore();\n    const n = chars.length;\n    \n    while(i < n && char === chars[i])\n        i++;\n    \n    if (!i)\n        charStore([]);\n    \n    const skipN = skipCount = i;\n    \n    charStore(charStore().concat(char));\n    \n    const names = DOM.getFilenames(files);\n    const isTest = (a) => regExp.test(a);\n    const isRoot = (a) => a === '..';\n    const not = (f) => (a) => !f(a);\n    const setCurrent = (name) => {\n        const byName = DOM.getCurrentByName(name);\n        \n        if (!skipCount) {\n            setted = true;\n            DOM.setCurrentFile(byName);\n            return true;\n        } else {\n            if (skipN === skipCount)\n                firstByName = byName;\n            \n            --skipCount;\n        }\n    };\n    \n    names\n        .filter(isTest)\n        .filter(not(isRoot))\n        .some(setCurrent);\n    \n    if (!setted) {\n        DOM.setCurrentFile(firstByName);\n        charStore([char]);\n    }\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./client/key/set-current-by-char.js\n// module id = 48\n// module chunks = 16\n\n//# sourceURL=file://cloudcmd/client/key/set-current-by-char.js");

/***/ }),
/* 49 */
/*!************************!*\
  !*** ./client/sort.js ***!
  \************************/
/*! no static exports found */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\n\n/* global CloudCmd */\nconst DOM = __webpack_require__(/*! ./dom */ 8);\n\nconst Info = DOM.CurrentInfo;\nconst sort = CloudCmd.sort;\nconst order = CloudCmd.order;\nconst position = DOM.getPanelPosition();\n\nlet sortPrevious = sort[position];\n\nconst {getPanel} = DOM;\n\nCloudCmd.sortPanel = (name, panel = getPanel()) => {\n    const position = panel\n        .dataset\n        .name\n        .replace('js-', '');\n    \n    if (name !== sortPrevious) {\n        order[position] = 'asc';\n    } else {\n        if (order[position] === 'asc')\n            order[position] = 'desc';\n        else\n            order[position] = 'asc';\n    }\n    \n    sortPrevious =\n    sort[position] = name;\n    \n    const noCurrent = position !== Info.panelPosition;\n    \n    CloudCmd.refresh({\n        panel,\n        noCurrent,\n    });\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./client/sort.js\n// module id = 49\n// module chunks = 16\n\n//# sourceURL=file://cloudcmd/client/sort.js");

/***/ }),
/* 50 */,
/* 51 */,
/* 52 */,
/* 53 */,
/* 54 */,
/* 55 */,
/* 56 */,
/* 57 */,
/* 58 */,
/* 59 */,
/* 60 */,
/* 61 */,
/* 62 */,
/* 63 */,
/* 64 */,
/* 65 */,
/* 66 */,
/* 67 */,
/* 68 */,
/* 69 */,
/* 70 */,
/* 71 */
/*!*************************************************!*\
  !*** ./node_modules/css-loader/lib/css-base.js ***!
  \*************************************************/
/*! no static exports found */
/*! all exports used */
/***/ (function(module, exports) {

eval("/*\n\tMIT License http://www.opensource.org/licenses/mit-license.php\n\tAuthor Tobias Koppers @sokra\n*/\n// css base code, injected by the css-loader\nmodule.exports = function(useSourceMap) {\n\tvar list = [];\n\n\t// return the list of modules as css string\n\tlist.toString = function toString() {\n\t\treturn this.map(function (item) {\n\t\t\tvar content = cssWithMappingToString(item, useSourceMap);\n\t\t\tif(item[2]) {\n\t\t\t\treturn \"@media \" + item[2] + \"{\" + content + \"}\";\n\t\t\t} else {\n\t\t\t\treturn content;\n\t\t\t}\n\t\t}).join(\"\");\n\t};\n\n\t// import a list of modules into the list\n\tlist.i = function(modules, mediaQuery) {\n\t\tif(typeof modules === \"string\")\n\t\t\tmodules = [[null, modules, \"\"]];\n\t\tvar alreadyImportedModules = {};\n\t\tfor(var i = 0; i < this.length; i++) {\n\t\t\tvar id = this[i][0];\n\t\t\tif(typeof id === \"number\")\n\t\t\t\talreadyImportedModules[id] = true;\n\t\t}\n\t\tfor(i = 0; i < modules.length; i++) {\n\t\t\tvar item = modules[i];\n\t\t\t// skip already imported module\n\t\t\t// this implementation is not 100% perfect for weird media query combinations\n\t\t\t//  when a module is imported multiple times with different media queries.\n\t\t\t//  I hope this will never occur (Hey this way we have smaller bundles)\n\t\t\tif(typeof item[0] !== \"number\" || !alreadyImportedModules[item[0]]) {\n\t\t\t\tif(mediaQuery && !item[2]) {\n\t\t\t\t\titem[2] = mediaQuery;\n\t\t\t\t} else if(mediaQuery) {\n\t\t\t\t\titem[2] = \"(\" + item[2] + \") and (\" + mediaQuery + \")\";\n\t\t\t\t}\n\t\t\t\tlist.push(item);\n\t\t\t}\n\t\t}\n\t};\n\treturn list;\n};\n\nfunction cssWithMappingToString(item, useSourceMap) {\n\tvar content = item[1] || '';\n\tvar cssMapping = item[3];\n\tif (!cssMapping) {\n\t\treturn content;\n\t}\n\n\tif (useSourceMap && typeof btoa === 'function') {\n\t\tvar sourceMapping = toComment(cssMapping);\n\t\tvar sourceURLs = cssMapping.sources.map(function (source) {\n\t\t\treturn '/*# sourceURL=' + cssMapping.sourceRoot + source + ' */'\n\t\t});\n\n\t\treturn [content].concat(sourceURLs).concat([sourceMapping]).join('\\n');\n\t}\n\n\treturn [content].join('\\n');\n}\n\n// Adapted from convert-source-map (MIT)\nfunction toComment(sourceMap) {\n\t// eslint-disable-next-line no-undef\n\tvar base64 = btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap))));\n\tvar data = 'sourceMappingURL=data:application/json;charset=utf-8;base64,' + base64;\n\n\treturn '/*# ' + data + ' */';\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/css-loader/lib/css-base.js\n// module id = 71\n// module chunks = 16\n\n//# sourceURL=file://cloudcmd/node_modules/css-loader/lib/css-base.js");

/***/ })
/******/ ]);